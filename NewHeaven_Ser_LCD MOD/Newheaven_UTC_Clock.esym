D G "__PCH__" 0 108 ""5.118P""
D G "__DEVICE__" 0 108 "4520"
D G "__DATE__" 0 108 ""23-Mar-24""
D G "__TIME__" 0 108 ""17:49:14""
D G "_UNICODE" 0 108 ""?""
D G "__EVAL" 0 108 ""?"" "Standard Header file for the PIC18F4520 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
F N "set_tris_a" 2 43 ""
V L "value" 2 43 "int8" `55 
F B "set_tris_a" 2 43 "void(int8 value)" `54 
F N "set_tris_b" 2 44 ""
V L "value" 2 44 "int8" `57 
F B "set_tris_b" 2 44 "void(int8 value)" `56 
F N "set_tris_c" 2 45 ""
V L "value" 2 45 "int8" `59 
F B "set_tris_c" 2 45 "void(int8 value)" `58 
F N "set_tris_d" 2 46 ""
V L "value" 2 46 "int8" `61 
F B "set_tris_d" 2 46 "void(int8 value)" `60 
F N "set_tris_e" 2 47 ""
V L "value" 2 47 "int8" `63 
F B "set_tris_e" 2 47 "void(int8 value)" `62 
F N "get_tris_a" 2 48 ""
F B "get_tris_a" 2 48 "int8()" `64 
F N "get_tris_b" 2 49 ""
F B "get_tris_b" 2 49 "int8()" `65 
F N "get_tris_c" 2 50 ""
F B "get_tris_c" 2 50 "int8()" `66 
F N "get_tris_d" 2 51 ""
F B "get_tris_d" 2 51 "int8()" `67 
F N "get_tris_e" 2 52 ""
F B "get_tris_e" 2 52 "int8()" `68 
F N "output_a" 2 53 ""
V L "value" 2 53 "int8" `70 
F B "output_a" 2 53 "void(int8 value)" `69 
F N "output_b" 2 54 ""
V L "value" 2 54 "int8" `72 
F B "output_b" 2 54 "void(int8 value)" `71 
F N "output_c" 2 55 ""
V L "value" 2 55 "int8" `74 
F B "output_c" 2 55 "void(int8 value)" `73 
F N "output_d" 2 56 ""
V L "value" 2 56 "int8" `76 
F B "output_d" 2 56 "void(int8 value)" `75 
F N "output_e" 2 57 ""
V L "value" 2 57 "int8" `78 
F B "output_e" 2 57 "void(int8 value)" `77 
F N "input_a" 2 58 ""
F B "input_a" 2 58 "int8()" `79 
F N "input_b" 2 59 ""
F B "input_b" 2 59 "int8()" `80 
F N "input_c" 2 60 ""
F B "input_c" 2 60 "int8()" `81 
F N "input_d" 2 61 ""
F B "input_d" 2 61 "int8()" `82 
F N "input_e" 2 62 ""
F B "input_e" 2 62 "int8()" `83 
F N "input_change_a" 2 63 ""
F B "input_change_a" 2 63 "int8()" `84 
F N "input_change_b" 2 64 ""
F B "input_change_b" 2 64 "int8()" `85 
F N "input_change_c" 2 65 ""
F B "input_change_c" 2 65 "int8()" `86 
F N "input_change_d" 2 66 ""
F B "input_change_d" 2 66 "int8()" `87 
F N "input_change_e" 2 67 ""
F B "input_change_e" 2 67 "int8()" `88 
F N "port_b_pullups" 2 68 ""
V L "value" 2 68 "int8" `90 
F B "port_b_pullups" 2 68 "void(int8 value)" `89 
F N "input" 2 69 ""
V L "pin" 2 69 "int16" `92 
F B "input" 2 69 "int8(int16 pin)" `91 
F N "input_state" 2 70 ""
V L "pin" 2 70 "int16" `94 
F B "input_state" 2 70 "int8(int16 pin)" `93 
F N "output_low" 2 71 ""
V L "pin" 2 71 "int16" `96 
F B "output_low" 2 71 "void(int16 pin)" `95 
F N "output_high" 2 72 ""
V L "pin" 2 72 "int16" `98 
F B "output_high" 2 72 "void(int16 pin)" `97 
F N "output_toggle" 2 73 ""
V L "pin" 2 73 "int16" `100 
F B "output_toggle" 2 73 "void(int16 pin)" `99 
F N "output_bit" 2 74 ""
V L "pin" 2 74 "int16" `102 
V L "level" 2 74 "int8" `103 
F B "output_bit" 2 74 "void(int16 pin,int8 level)" `101 
F N "output_float" 2 75 ""
V L "pin" 2 75 "int16" `105 
F B "output_float" 2 75 "void(int16 pin)" `104 
F N "output_drive" 2 76 ""
V L "pin" 2 76 "int16" `107 
F B "output_drive" 2 76 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
D G "PIN_A0" 2 80 "31744"
D G "PIN_A1" 2 81 "31745"
D G "PIN_A2" 2 82 "31746"
D G "PIN_A3" 2 83 "31747"
D G "PIN_A4" 2 84 "31748"
D G "PIN_A5" 2 85 "31749"
D G "PIN_A6" 2 86 "31750"
D G "PIN_A7" 2 87 "31751"
D G "PIN_B0" 2 89 "31752"
D G "PIN_B1" 2 90 "31753"
D G "PIN_B2" 2 91 "31754"
D G "PIN_B3" 2 92 "31755"
D G "PIN_B4" 2 93 "31756"
D G "PIN_B5" 2 94 "31757"
D G "PIN_B6" 2 95 "31758"
D G "PIN_B7" 2 96 "31759"
D G "PIN_C0" 2 98 "31760"
D G "PIN_C1" 2 99 "31761"
D G "PIN_C2" 2 100 "31762"
D G "PIN_C3" 2 101 "31763"
D G "PIN_C4" 2 102 "31764"
D G "PIN_C5" 2 103 "31765"
D G "PIN_C6" 2 104 "31766"
D G "PIN_C7" 2 105 "31767"
D G "PIN_D0" 2 107 "31768"
D G "PIN_D1" 2 108 "31769"
D G "PIN_D2" 2 109 "31770"
D G "PIN_D3" 2 110 "31771"
D G "PIN_D4" 2 111 "31772"
D G "PIN_D5" 2 112 "31773"
D G "PIN_D6" 2 113 "31774"
D G "PIN_D7" 2 114 "31775"
D G "PIN_E0" 2 116 "31776"
D G "PIN_E1" 2 117 "31777"
D G "PIN_E2" 2 118 "31778"
D G "PIN_E3" 2 119 "31779"
D G "FALSE" 2 122 "0"
D G "TRUE" 2 123 "1"
D G "BYTE" 2 125 "int8"
D G "BOOLEAN" 2 126 "int1"
D G "getc" 2 128 "getch"
D G "fgetc" 2 129 "getch"
D G "getchar" 2 130 "getch"
D G "putc" 2 131 "putchar"
D G "fputc" 2 132 "putchar"
D G "fgets" 2 133 "gets"
D G "fputs" 2 134 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
F N "restart_cause" 2 139 ""
F B "restart_cause" 2 139 "int8()" `108 
F N "reset_cpu" 2 140 ""
F B "reset_cpu" 2 140 "void()" `109 
F N "sleep" 2 141 ""
F B "sleep" 2 141 "void()" `110 
F N "sleep" 2 142 ""
V L "type" 2 142 "int8" `112 
F B "sleep" 2 142 "void(int8 type)" `111  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_TIMEOUT" 2 144 "7"
D G "MCLR_FROM_SLEEP" 2 145 "11"
D G "MCLR_FROM_RUN" 2 146 "15"
D G "NORMAL_POWER_UP" 2 147 "12"
D G "BROWNOUT_RESTART" 2 148 "14"
D G "WDT_FROM_SLEEP" 2 149 "3"
D G "RESET_INSTRUCTION" 2 150 "0"
D G "SLEEP_FULL" 2 153 "0" "Default"
D G "SLEEP_IDLE" 2 154 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
F N "setup_timer_0" 2 161 ""
V L "mode" 2 161 "int8" `114 
F B "setup_timer_0" 2 161 "void(int8 mode)" `113 
F N "set_timer0" 2 162 ""
V L "value" 2 162 "int16" `116 
F B "set_timer0" 2 162 "void(int16 value)" `115 
F N "get_timer0" 2 163 ""
F B "get_timer0" 2 163 "int16()" `117 
F N "setup_counters" 2 164 ""
V L "mode" 2 164 "int8" `119 
V L "prescaler" 2 164 "int8" `120 
F B "setup_counters" 2 164 "void(int8 mode,int8 prescaler)" `118 
F N "set_rtcc" 2 165 ""
V L "value" 2 165 "int16" `122 
F B "set_rtcc" 2 165 "void(int16 value)" `121 
F N "get_rtcc" 2 166 ""
F B "get_rtcc" 2 166 "int16()" `123  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 2 168 "0"
D G "T0_EXT_L_TO_H" 2 169 "32"
D G "T0_EXT_H_TO_L" 2 170 "48"
D G "T0_DIV_1" 2 172 "8"
D G "T0_DIV_2" 2 173 "0"
D G "T0_DIV_4" 2 174 "1"
D G "T0_DIV_8" 2 175 "2"
D G "T0_DIV_16" 2 176 "3"
D G "T0_DIV_32" 2 177 "4"
D G "T0_DIV_64" 2 178 "5"
D G "T0_DIV_128" 2 179 "6"
D G "T0_DIV_256" 2 180 "7"
D G "T0_OFF" 2 182 "0x80"
D G "T0_8_BIT" 2 184 "0x40"
D G "RTCC_INTERNAL" 2 188 "0"
D G "RTCC_EXT_L_TO_H" 2 189 "32"
D G "RTCC_EXT_H_TO_L" 2 190 "48"
D G "RTCC_DIV_1" 2 191 "8"
D G "RTCC_DIV_2" 2 192 "0"
D G "RTCC_DIV_4" 2 193 "1"
D G "RTCC_DIV_8" 2 194 "2"
D G "RTCC_DIV_16" 2 195 "3"
D G "RTCC_DIV_32" 2 196 "4"
D G "RTCC_DIV_64" 2 197 "5"
D G "RTCC_DIV_128" 2 198 "6"
D G "RTCC_DIV_256" 2 199 "7"
D G "RTCC_OFF" 2 200 "0x80"
D G "RTCC_8_BIT" 2 201 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
F N "setup_wdt" 2 212 ""
V L "mode" 2 212 "int16" `125 
F B "setup_wdt" 2 212 "void(int16 mode)" `124 
F N "restart_wdt" 2 213 ""
F B "restart_wdt" 2 213 "void()" `126  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 2 215 "0x100"
D G "WDT_OFF" 2 216 "0"
D G "WDT_4MS" 2 218 "0x300"
D G "WDT_8MS" 2 219 "0x500"
D G "WDT_16MS" 2 220 "0x700"
D G "WDT_32MS" 2 221 "0x900"
D G "WDT_64MS" 2 222 "0xB00"
D G "WDT_128MS" 2 223 "0xD00"
D G "WDT_256MS" 2 224 "0xF00"
D G "WDT_512MS" 2 225 "0x1100"
D G "WDT_1S" 2 226 "0x1300"
D G "WDT_2S" 2 227 "0x1500"
D G "WDT_4S" 2 228 "0x1700"
D G "WDT_8S" 2 229 "0x1900"
D G "WDT_16S" 2 230 "0x1B00"
D G "WDT_32S" 2 231 "0x1D00"
D G "WDT_64S" 2 232 "0x1F00"
D G "WDT_128S" 2 233 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
F N "setup_timer_1" 2 238 ""
V L "mode" 2 238 "int16" `128 
F B "setup_timer_1" 2 238 "void(int16 mode)" `127 
F N "get_timer1" 2 239 ""
F B "get_timer1" 2 239 "int16()" `129 
F N "set_timer1" 2 240 ""
V L "value" 2 240 "int16" `131 
F B "set_timer1" 2 240 "void(int16 value)" `130  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 2 243 "0"
D G "T1_INTERNAL" 2 244 "0x85"
D G "T1_EXTERNAL" 2 245 "0x87"
D G "T1_EXTERNAL_SYNC" 2 246 "0x83"
D G "T1_CLK_OUT" 2 248 "8"
D G "T1_DIV_BY_1" 2 250 "0"
D G "T1_DIV_BY_2" 2 251 "0x10"
D G "T1_DIV_BY_4" 2 252 "0x20"
D G "T1_DIV_BY_8" 2 253 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
F N "setup_timer_2" 2 258 ""
V L "mode" 2 258 "int8" `133 
V L "period" 2 258 "int8" `134 
V L "postscale" 2 258 "int8" `135 
F B "setup_timer_2" 2 258 "void(int8 mode,int8 period,int8 postscale)" `132 
F N "get_timer2" 2 259 ""
F B "get_timer2" 2 259 "int8()" `136 
F N "set_timer2" 2 260 ""
V L "value" 2 260 "int8" `138 
F B "set_timer2" 2 260 "void(int8 value)" `137  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 2 262 "0"
D G "T2_DIV_BY_1" 2 263 "4"
D G "T2_DIV_BY_4" 2 264 "5"
D G "T2_DIV_BY_16" 2 265 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
F N "setup_timer_3" 2 270 ""
V L "mode" 2 270 "int16" `140 
F B "setup_timer_3" 2 270 "void(int16 mode)" `139 
F N "get_timer3" 2 271 ""
F B "get_timer3" 2 271 "int16()" `141 
F N "set_timer3" 2 272 ""
V L "value" 2 272 "int16" `143 
F B "set_timer3" 2 272 "void(int16 value)" `142  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 2 275 "0"
D G "T3_INTERNAL" 2 276 "0x85"
D G "T3_EXTERNAL" 2 277 "0x87"
D G "T3_EXTERNAL_SYNC" 2 278 "0x83"
D G "T3_DIV_BY_1" 2 280 "0"
D G "T3_DIV_BY_2" 2 281 "0x10"
D G "T3_DIV_BY_4" 2 282 "0x20"
D G "T3_DIV_BY_8" 2 283 "0x30"
D G "T3_CCP1_TO_2" 2 286 "0x48"
D G "T3_CCP2" 2 287 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
F N "setup_ccp1" 2 293 ""
V L "mode" 2 293 "int32" `145 
F B "setup_ccp1" 2 293 "void(int32 mode)" `144 
F N "setup_ccp1" 2 294 ""
V L "mode" 2 294 "int32" `147 
V L "pwm" 2 294 "int8" `148 
F B "setup_ccp1" 2 294 "void(int32 mode,int8 pwm)" `146 
F N "set_pwm1_duty" 2 295 ""
V L "value" 2 295 "int8" `150 
F B "set_pwm1_duty" 2 295 "void(int8 value)" `149 
F N "set_pwm1_duty" 2 296 ""
V L "value" 2 296 "int16" `152 
F B "set_pwm1_duty" 2 296 "void(int16 value)" `151  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 2 298 "0"
D G "CCP_CAPTURE_FE" 2 299 "0x04"
D G "CCP_CAPTURE_RE" 2 300 "0x05"
D G "CCP_CAPTURE_DIV_4" 2 301 "0x06"
D G "CCP_CAPTURE_DIV_16" 2 302 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 2 303 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 2 304 "0x09"
D G "CCP_COMPARE_INT" 2 305 "0x0A"
D G "CCP_COMPARE_INT_AND_TOGGLE" 2 306 "0x02"
D G "CCP_COMPARE_RESET_TIMER" 2 307 "0x0B                   PIC16F17176,PIC16F17175,PIC16F17174"
D G "CCP_PWM" 2 308 "0x0C"
D G "CCP_PWM_PLUS_1" 2 309 "0x1c                    PIC16F17176,PIC16F17175,PIC16F17174"
D G "CCP_PWM_PLUS_2" 2 310 "0x2c                    PIC16F17176,PIC16F17175,PIC16F17174"
D G "CCP_PWM_PLUS_3" 2 311 "0x3c                    PIC16F17176,PIC16F17175,PIC16F17174"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
D G "CCP_PWM_H_H" 2 319 "0x0c"
D G "CCP_PWM_H_L" 2 320 "0x0d"
D G "CCP_PWM_L_H" 2 321 "0x0e"
D G "CCP_PWM_L_L" 2 322 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 2 324 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 2 325 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 2 326 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 2 328 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 2 329 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 2 330 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 2 331 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 332 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 333 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 2 334 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 2 336 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 2 337 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 2 338 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 2 340 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 2 341 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 2 342 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 2 344 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
F N "setup_ccp2" 2 347 ""
V L "mode" 2 347 "int32" `157 
F B "setup_ccp2" 2 347 "void(int32 mode)" `156 
F N "setup_ccp2" 2 348 ""
V L "mode" 2 348 "int32" `159 
V L "pwm" 2 348 "int8" `160 
F B "setup_ccp2" 2 348 "void(int32 mode,int8 pwm)" `158 
F N "set_pwm2_duty" 2 349 ""
V L "value" 2 349 "int8" `162 
F B "set_pwm2_duty" 2 349 "void(int8 value)" `161 
F N "set_pwm2_duty" 2 350 ""
V L "value" 2 350 "int16" `164 
F B "set_pwm2_duty" 2 350 "void(int16 value)" `163 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
F N "setup_psp" 2 360 ""
V L "mode" 2 360 "int8" `169 
F B "setup_psp" 2 360 "void(int8 mode)" `168 
F N "psp_output_full" 2 361 ""
F B "psp_output_full" 2 361 "int8()" `170 
F N "psp_input_full" 2 362 ""
F B "psp_input_full" 2 362 "int8()" `171 
F N "psp_overflow" 2 363 ""
F B "psp_overflow" 2 363 "int8()" `172  "Constants used in SETUP_PSP() are:"
D G "PSP_ENABLED" 2 365 "0x10"
D G "PSP_DISABLED" 2 366 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
F N "setup_spi" 2 373 ""
V L "mode" 2 373 "int32" `175 
F B "setup_spi" 2 373 "void(int32 mode)" `174 
F N "spi_write" 2 374 ""
V L "value" 2 374 "int8" `177 
F B "spi_write" 2 374 "void(int8 value)" `176 
F N "spi_write" 2 375 ""
V L "wait" 2 375 "int8" `179 
V L "value" 2 375 "int8" `180 
F B "spi_write" 2 375 "void(int8 wait,int8 value)" `178 
F N "spi_read" 2 376 ""
F B "spi_read" 2 376 "int8()" `181 
F N "spi_read" 2 377 ""
V L "value" 2 377 "int8" `183 
F B "spi_read" 2 377 "int8(int8 value)" `182 
F N "spi_data_is_in" 2 378 ""
F B "spi_data_is_in" 2 378 "int8()" `184 
F N "setup_spi2" 2 379 ""
V L "mode" 2 379 "int32" `186 
F B "setup_spi2" 2 379 "void(int32 mode)" `185 
F N "spi_write2" 2 380 ""
V L "value" 2 380 "int8" `188 
F B "spi_write2" 2 380 "void(int8 value)" `187 
F N "spi_read2" 2 381 ""
F B "spi_read2" 2 381 "int8()" `189 
F N "spi_read2" 2 382 ""
V L "value" 2 382 "int8" `191 
F B "spi_read2" 2 382 "int8(int8 value)" `190 
F N "spi_data_is_in2" 2 383 ""
F B "spi_data_is_in2" 2 383 "int8()" `192  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 2 385 "0x00"
D G "SPI_MASTER" 2 386 "0x20"
D G "SPI_SLAVE" 2 387 "0x24"
D G "SPI_SCK_IDLE_HIGH" 2 388 "0x10"
D G "SPI_SCK_IDLE_LOW" 2 389 "0x00"
D G "SPI_CLK_DIV_4" 2 390 "0x00"
D G "SPI_CLK_DIV_16" 2 391 "0x01"
D G "SPI_CLK_DIV_64" 2 392 "0x02"
D G "SPI_CLK_T2" 2 393 "0x03"
D G "SPI_SS_DISABLED" 2 394 "0x01"
D G "SPI_XMIT_L_TO_H" 2 396 "0x4000"
D G "SPI_XMIT_H_TO_L" 2 397 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 2 399 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 400 "0x8000"
D G "SPI_L_TO_H" 2 403 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 404 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
F N "setup_uart" 2 408 ""
V L "baud" 2 408 "int32" `194 
F B "setup_uart" 2 408 "void(int32 baud)" `193 
F N "setup_uart" 2 409 ""
V L "baud" 2 409 "int32" `196 
V L "stream" 2 409 "int8" `197 
F B "setup_uart" 2 409 "void(int32 baud,int8 stream)" `195 
F N "setup_uart" 2 410 ""
V L "baud" 2 410 "int32" `199 
V L "stream" 2 410 "int8" `200 
V L "clock" 2 410 "int32" `201 
F B "setup_uart" 2 410 "void(int32 baud,int8 stream,int32 clock)" `198 
F N "set_uart_speed" 2 411 ""
V L "baud" 2 411 "int32" `203 
F B "set_uart_speed" 2 411 "void(int32 baud)" `202 
F N "set_uart_speed" 2 412 ""
V L "baud" 2 412 "int32" `205 
V L "stream" 2 412 "int8" `206 
F B "set_uart_speed" 2 412 "void(int32 baud,int8 stream)" `204 
F N "set_uart_speed" 2 413 ""
V L "baud" 2 413 "int32" `208 
V L "stream" 2 413 "int8" `209 
V L "clock" 2 413 "int32" `210 
F B "set_uart_speed" 2 413 "void(int32 baud,int8 stream,int32 clock)" `207  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 417 "2"
D G "UART_DATA" 2 418 "4"
D G "UART_AUTODETECT" 2 419 "8"
D G "UART_AUTODETECT_NOWAIT" 2 420 "9"
D G "UART_WAKEUP_ON_RDA" 2 421 "10"
D G "UART_SEND_BREAK" 2 422 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
F N "setup_comparator" 2 427 ""
V L "mode" 2 427 "int32" `212 
F B "setup_comparator" 2 427 "void(int32 mode)" `211  "Constants used in setup_comparator() are:"
D G "A0_A3_A1_A3" 2 429 "0xfff04"
D G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 430 "0xfcf03"
D G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 431 "0xbcf05"
D G "NC_NC_NC_NC" 2 432 "0x0ff07"
D G "A0_A3_A1_A2" 2 433 "0xfff02"
D G "A0_A3_NC_NC_OUT_ON_A4" 2 434 "0x9ef01"
D G "A0_VR_A1_VR" 2 435 "0x3ff06"
D G "A3_VR_A2_VR" 2 436 "0xcff0e"
D G "CP1_INVERT" 2 437 "0x0000010"
D G "CP2_INVERT" 2 438 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
F N "setup_vref" 2 445 ""
V L "mode" 2 445 "int8" `216 
F B "setup_vref" 2 445 "void(int8 mode)" `215  "Constants used in setup_vref() are:"
D G "VREF_LOW" 2 447 "0xa0"
D G "VREF_HIGH" 2 448 "0x80"
D G "VREF_F5" 2 450 "0x40"
D G "VREF_COMP" 2 451 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
F N "setup_low_volt_detect" 2 455 ""
V L "mode" 2 455 "int8" `218 
F B "setup_low_volt_detect" 2 455 "void(int8 mode)" `217  "Constants used in setup_low_volt_detect() are:"
D G "LVD_LVDIN" 2 457 "0x1F"
D G "LVD_45" 2 458 "0x1E"
D G "LVD_42" 2 459 "0x1D"
D G "LVD_40" 2 460 "0x1C"
D G "LVD_38" 2 461 "0x1B"
D G "LVD_36" 2 462 "0x1A"
D G "LVD_35" 2 463 "0x19"
D G "LVD_33" 2 464 "0x18"
D G "LVD_30" 2 465 "0x17"
D G "LVD_28" 2 466 "0x16"
D G "LVD_27" 2 467 "0x15"
D G "LVD_25" 2 468 "0x14"
D G "LVD_24" 2 469 "0x13"
D G "LVD_23" 2 470 "0x12"
D G "LVD_22" 2 471 "0x11"
D G "LVD_21" 2 472 "0x10"
D G "LVD_TRIGGER_BELOW" 2 474 "0"
D G "LVD_TRIGGER_ABOVE" 2 475 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
F N "setup_oscillator" 2 480 ""
V L "mode" 2 480 "int8" `220 
F B "setup_oscillator" 2 480 "int8(int8 mode)" `219 
F N "setup_oscillator" 2 481 ""
V L "mode" 2 481 "int8" `222 
V L "tune" 2 481 "sint8" `223 
F B "setup_oscillator" 2 481 "int8(int8 mode,sint8 tune)" `221  "Constants used in setup_oscillator() are:"
D G "OSC_31KHZ" 2 484 "0"
D G "OSC_125KHZ" 2 485 "0x10"
D G "OSC_250KHZ" 2 486 "0x20"
D G "OSC_500KHZ" 2 487 "0x30"
D G "OSC_1MHZ" 2 488 "0x40"
D G "OSC_2MHZ" 2 489 "0x50"
D G "OSC_4MHZ" 2 490 "0x60"
D G "OSC_8MHZ" 2 491 "0x70"
D G "OSC_16MHZ" 2 492 "0x4060"
D G "OSC_32MHZ" 2 493 "0x4070"
D G "OSC_TIMER1" 2 495 "1"
D G "OSC_INTRC" 2 496 "2"
D G "OSC_NORMAL" 2 497 "0"
D G "OSC_IDLE_MODE" 2 499 "0x80"
D G "OSC_31250" 2 500 "0x8000"
D G "OSC_PLL_ON" 2 501 "0x4000"
D G "OSC_PLL_OFF" 2 502 "0"
D G "OSC_STATE_STABLE" 2 506 "4"
D G "OSC_STATE_EXT_RUNNING" 2 507 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
F N "setup_adc" 2 514 ""
V L "mode" 2 514 "int16" `225 
F B "setup_adc" 2 514 "void(int16 mode)" `224 
F N "read_adc" 2 515 ""
F B "read_adc" 2 515 "int8()" `226 
F N "read_adc" 2 516 ""
V L "mode" 2 516 "int8" `228 
F B "read_adc" 2 516 "int8(int8 mode)" `227 
F N "read_adc" 2 517 ""
f G "read_adc" 2 517 "int16()" `229 
F N "read_adc" 2 518 ""
V L "mode" 2 518 "int8" `230 
f G "read_adc" 2 518 "int16(int8 mode,int8 pins)" `229 
F N "adc_done" 2 519 ""
F B "adc_done" 2 519 "int8(int8 mode,int8 pins)" `229  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 521 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 2 522 "0x100"
D G "ADC_CLOCK_DIV_4" 2 523 "0x04"
D G "ADC_CLOCK_DIV_8" 2 524 "0x01"
D G "ADC_CLOCK_DIV_16" 2 525 "0x05"
D G "ADC_CLOCK_DIV_32" 2 526 "0x02"
D G "ADC_CLOCK_DIV_64" 2 527 "0x06"
D G "ADC_CLOCK_INTERNAL" 2 528 "0x07" "Internal 2-6us"
D G "ADC_TAD_MUL_0" 2 530 "0x00"
D G "ADC_TAD_MUL_2" 2 531 "0x08"
D G "ADC_TAD_MUL_4" 2 532 "0x10"
D G "ADC_TAD_MUL_6" 2 533 "0x18"
D G "ADC_TAD_MUL_8" 2 534 "0x20"
D G "ADC_TAD_MUL_12" 2 535 "0x28"
D G "ADC_TAD_MUL_16" 2 536 "0x30"
D G "ADC_TAD_MUL_20" 2 537 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
F N "setup_adc_ports" 2 540 ""
V L "pins" 2 540 "int8" `231 
F B "setup_adc_ports" 2 540 "void(int8 pins)" `230 
F N "setup_adc_ports" 2 541 ""
V L "pins" 2 541 "int8" `233 
V L "reference" 2 541 "int8" `234 
F B "setup_adc_ports" 2 541 "void(int8 pins,int8 reference)" `232 
F N "set_analog_pins" 2 542 ""
V L "pins" 2 542 "int8" `236 
F B "set_analog_pins" 2 542 "void(int8 pins)" `235 
F N "set_analog_pins" 2 543 ""
V L "pins" 2 543 "int8" `238 
V L "reference" 2 543 "int8" `239 
F B "set_analog_pins" 2 543 "void(int8 pins,int8 reference)" `237 
F N "set_adc_channel" 2 544 ""
V L "channel" 2 544 "int8" `241 
F B "set_adc_channel" 2 544 "void(int8 channel)" `240  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
D G "NO_ANALOGS" 2 547 "0x0F" "None"
D G "ALL_ANALOG" 2 548 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
D G "AN0_TO_AN11" 2 549 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
D G "AN0_TO_AN10" 2 550 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
D G "AN0_TO_AN9" 2 551 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
D G "AN0_TO_AN8" 2 552 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
D G "AN0_TO_AN7" 2 553 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
D G "AN0_TO_AN6" 2 554 "0x08" "A0 A1 A2 A3 A5 E0 E1"
D G "AN0_TO_AN5" 2 555 "0x09" "A0 A1 A2 A3 A5 E0"
D G "AN0_TO_AN4" 2 556 "0x0A" "A0 A1 A2 A3 A5"
D G "AN0_TO_AN3" 2 557 "0x0B" "A0 A1 A2 A3"
D G "AN0_TO_AN2" 2 558 "0x0C" "A0 A1 A2"
D G "AN0_TO_AN1" 2 559 "0x0D" "A0 A1"
D G "AN0" 2 560 "0x0E" "A0"
D G "AN0_TO_AN11_ANALOG" 2 561 "0x03" "!old only provided for compatibility"
D G "AN0_TO_AN10_ANALOG" 2 562 "0x04" "!old only provided for compatibility"
D G "AN0_TO_AN9_ANALOG" 2 563 "0x05" "!old only provided for compatibility"
D G "AN0_TO_AN8_ANALOG" 2 564 "0x06" "!old only provided for compatibility"
D G "AN0_TO_AN7_ANALOG" 2 565 "0x07" "!old only provided for compatibility"
D G "AN0_TO_AN6_ANALOG" 2 566 "0x08" "!old only provided for compatibility"
D G "AN0_TO_AN5_ANALOG" 2 567 "0x09" "!old only provided for compatibility"
D G "AN0_TO_AN4_ANALOG" 2 568 "0x0A" "!old only provided for compatibility"
D G "AN0_TO_AN3_ANALOG" 2 569 "0x0B" "!old only provided for compatibility"
D G "AN0_TO_AN2_ANALOG" 2 570 "0x0C" "!old only provided for compatibility"
D G "AN0_TO_AN1_ANALOG" 2 571 "0x0D" "!old only provided for compatibility"
D G "AN0_ANALOG" 2 572 "0x0E" "!old only provided for compatibility"
D G "VSS_VDD" 2 575 "0x00" "Range 0-Vdd"
D G "VREF_VREF" 2 576 "0x30" "Range VrefL-VrefH"
D G "VREF_VDD" 2 577 "0x20" "Range VrefL-Vdd"
D G "VSS_VREF" 2 578 "0x10" "Range 0-VrefH"
D G "ADC_START_AND_READ" 2 581 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 2 582 "1"
D G "ADC_READ_ONLY" 2 583 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
F N "abs" 2 589 ""
V L "x" 2 589 "sint8" `243 
F B "abs" 2 589 "sint8(sint8 x)" `242 
F N "abs" 2 590 ""
V L "x" 2 590 "sint16" `245 
F B "abs" 2 590 "sint16(sint16 x)" `244 
F N "abs" 2 591 ""
V L "x" 2 591 "sint32" `247 
F B "abs" 2 591 "sint32(sint32 x)" `246 
F N "abs" 2 592 ""
V L "x" 2 592 "float" `249 
F B "abs" 2 592 "float(float x)" `248 
F N "_mul" 2 593 ""
V L "??65535" 2 593 "int8" `251 
V L "??65535" 2 593 "int8" `252 
F B "_mul" 2 593 "int16(int8 ,int8 )" `250 
F N "_mul" 2 594 ""
V L "??65535" 2 594 "sint8" `254 
V L "??65535" 2 594 "sint8" `255 
F B "_mul" 2 594 "sint16(sint8 ,sint8 )" `253 
F N "_mul" 2 595 ""
V L "??65535" 2 595 "int16" `257 
V L "??65535" 2 595 "int16" `258 
F B "_mul" 2 595 "int32(int16 ,int16 )" `256 
F N "_mul" 2 596 ""
V L "??65535" 2 596 "sint16" `260 
V L "??65535" 2 596 "sint16" `261 
F B "_mul" 2 596 "sint32(sint16 ,sint16 )" `259  "Memory Manipulation Prototypes:"
F N "read_bank" 2 599 ""
V L "bank" 2 599 "int8" `263 
V L "offset" 2 599 "int8" `264 
F B "read_bank" 2 599 "int8(int8 bank,int8 offset)" `262 
F N "write_bank" 2 600 ""
V L "bank" 2 600 "int8" `266 
V L "offset" 2 600 "int8" `267 
V L "value" 2 600 "int8" `268 
F B "write_bank" 2 600 "void(int8 bank,int8 offset,int8 value)" `265 
F N "strcpy" 2 601 ""
V L "dest" 2 601 "*int8" `270 
V L "src" 2 601 "*int8" `271 
F B "strcpy" 2 601 "void(*int8 dest,*int8 src)" `269 
F N "memset" 2 602 ""
V L "destination" 2 602 "*int8" `273 
V L "value" 2 602 "int8" `274 
V L "num" 2 602 "int16" `275 
F B "memset" 2 602 "void(*int8 destination,int8 value,int16 num)" `272 
F N "memcpy" 2 603 ""
V L "destination" 2 603 "*int8" `277 
V L "source" 2 603 "*int8" `278 
V L "num" 2 603 "int16" `279 
F B "memcpy" 2 603 "void(*int8 destination,*int8 source,int16 num)" `276  "String Prototypes:"
F N "toupper" 2 606 ""
V L "cvalue" 2 606 "int8" `281 
F B "toupper" 2 606 "int8(int8 cvalue)" `280 
F N "tolower" 2 607 ""
V L "cvalue" 2 607 "int8" `283 
F B "tolower" 2 607 "int8(int8 cvalue)" `282 
F N "sprintf" 2 608 ""
V L "string" 2 608 "*int8" `285 
V L "cstring" 2 608 "*int8" `286 
F B "sprintf" 2 608 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `284  "Data Manipulators Prototypes:"
F N "shift_left" 2 611 ""
V L "address" 2 611 "*int8" `289 
V L "bytes" 2 611 "int8" `290 
V L "value" 2 611 "int8" `291 
F B "shift_left" 2 611 "int8(*int8 address,int8 bytes,int8 value)" `288 
F N "shift_right" 2 612 ""
V L "address" 2 612 "*int8" `293 
V L "bytes" 2 612 "int8" `294 
V L "value" 2 612 "int8" `295 
F B "shift_right" 2 612 "int8(*int8 address,int8 bytes,int8 value)" `292 
F N "rotate_left" 2 613 ""
V L "address" 2 613 "*int8" `297 
V L "bytes" 2 613 "int8" `298 
F B "rotate_left" 2 613 "void(*int8 address,int8 bytes)" `296 
F N "rotate_right" 2 614 ""
V L "address" 2 614 "*int8" `300 
V L "bytes" 2 614 "int8" `301 
F B "rotate_right" 2 614 "void(*int8 address,int8 bytes)" `299 
F N "swap" 2 615 ""
V L "value" 2 615 "int8" `303 
F B "swap" 2 615 "void(int8 value)" `302 
F N "make8" 2 616 ""
V L "var" 2 616 "int16" `305 
V L "offset" 2 616 "int8" `306 
F B "make8" 2 616 "int8(int16 var,int8 offset)" `304 
F N "make8" 2 617 ""
V L "var" 2 617 "int32" `308 
V L "offset" 2 617 "int8" `309 
F B "make8" 2 617 "int8(int32 var,int8 offset)" `307 
F N "make16" 2 618 ""
V L "varhigh" 2 618 "int8" `311 
V L "varlow" 2 618 "int8" `312 
F B "make16" 2 618 "int16(int8 varhigh,int8 varlow)" `310 
F N "make32" 2 619 ""
V L "var1" 2 619 "int16" `314 
F B "make32" 2 619 "int32(int16 var1)" `313 
F N "make32" 2 620 ""
V L "var1" 2 620 "int16" `316 
V L "var2" 2 620 "int16" `317 
F B "make32" 2 620 "int32(int16 var1,int16 var2)" `315 
F N "make32" 2 621 ""
V L "var1" 2 621 "int16" `319 
V L "var2" 2 621 "int8" `320 
F B "make32" 2 621 "int32(int16 var1,int8 var2)" `318 
F N "make32" 2 622 ""
V L "var1" 2 622 "int16" `322 
V L "var2" 2 622 "int8" `323 
V L "var3" 2 622 "int8" `324 
F B "make32" 2 622 "int32(int16 var1,int8 var2,int8 var3)" `321 
F N "make32" 2 623 ""
V L "var1" 2 623 "int8" `326 
F B "make32" 2 623 "int32(int8 var1)" `325 
F N "make32" 2 624 ""
V L "var1" 2 624 "int8" `328 
V L "var2" 2 624 "int8" `329 
F B "make32" 2 624 "int32(int8 var1,int8 var2)" `327 
F N "make32" 2 625 ""
V L "var1" 2 625 "int8" `331 
V L "var2" 2 625 "int8" `332 
V L "var3" 2 625 "int8" `333 
F B "make32" 2 625 "int32(int8 var1,int8 var2,int8 var3)" `330 
F N "make32" 2 626 ""
V L "var1" 2 626 "int8" `335 
V L "var2" 2 626 "int8" `336 
V L "var3" 2 626 "int8" `337 
V L "var4" 2 626 "int8" `338 
F B "make32" 2 626 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `334 
F N "make32" 2 627 ""
V L "var1" 2 627 "int8" `340 
V L "var2" 2 627 "int16" `341 
F B "make32" 2 627 "int32(int8 var1,int16 var2)" `339 
F N "make32" 2 628 ""
V L "var1" 2 628 "int8" `343 
V L "var2" 2 628 "int16" `344 
V L "var3" 2 628 "int8" `345 
F B "make32" 2 628 "int32(int8 var1,int16 var2,int8 var3)" `342 
F N "make32" 2 629 ""
V L "var1" 2 629 "int8" `347 
V L "var2" 2 629 "int8" `348 
V L "var3" 2 629 "int16" `349 
F B "make32" 2 629 "int32(int8 var1,int8 var2,int16 var3)" `346 
F N "bit_set" 2 630 ""
V L "var" 2 630 "int8" `351 
V L "bit" 2 630 "int8" `352 
F B "bit_set" 2 630 "void(int8 var,int8 bit)" `350 
F N "bit_set" 2 631 ""
V L "var" 2 631 "int16" `354 
V L "bit" 2 631 "int8" `355 
F B "bit_set" 2 631 "void(int16 var,int8 bit)" `353 
F N "bit_set" 2 632 ""
V L "var" 2 632 "int32" `357 
V L "bit" 2 632 "int8" `358 
F B "bit_set" 2 632 "void(int32 var,int8 bit)" `356 
F N "bit_clear" 2 633 ""
V L "var" 2 633 "int8" `360 
V L "bit" 2 633 "int8" `361 
F B "bit_clear" 2 633 "void(int8 var,int8 bit)" `359 
F N "bit_clear" 2 634 ""
V L "var" 2 634 "int16" `363 
V L "bit" 2 634 "int8" `364 
F B "bit_clear" 2 634 "void(int16 var,int8 bit)" `362 
F N "bit_clear" 2 635 ""
V L "var" 2 635 "int32" `366 
V L "bit" 2 635 "int8" `367 
F B "bit_clear" 2 635 "void(int32 var,int8 bit)" `365 
F N "bit_test" 2 636 ""
V L "var" 2 636 "int8" `369 
V L "bit" 2 636 "int8" `370 
F B "bit_test" 2 636 "int8(int8 var,int8 bit)" `368 
F N "bit_test" 2 637 ""
V L "var" 2 637 "int16" `372 
V L "bit" 2 637 "int8" `373 
F B "bit_test" 2 637 "int8(int16 var,int8 bit)" `371 
F N "bit_test" 2 638 ""
V L "var" 2 638 "int32" `375 
V L "bit" 2 638 "int8" `376 
F B "bit_test" 2 638 "int8(int32 var,int8 bit)" `374  "#use delay() Prototypes:"
F N "delay_cycles" 2 641 ""
V L "count" 2 641 "int8" `378 
F B "delay_cycles" 2 641 "void(int8 count)" `377 
F N "delay_ms" 2 642 ""
V L "time" 2 642 "int16" `380 
F B "delay_ms" 2 642 "void(int16 time)" `379 
F N "delay_us" 2 643 ""
V L "time" 2 643 "int16" `382 
F B "delay_us" 2 643 "void(int16 time)" `381  "#use rs232() Prototypes:"
F N "putchar" 2 646 ""
V L "cdata" 2 646 "int8" `384 
F B "putchar" 2 646 "void(int8 cdata)" `383 
F N "putchar" 2 647 ""
V L "cdata" 2 647 "int8" `386 
V L "stream" 2 647 "int8" `387 
F B "putchar" 2 647 "void(int8 cdata,int8 stream)" `385 
F N "puts" 2 648 ""
V L "string" 2 648 "*int8" `389 
F B "puts" 2 648 "void(*int8 string)" `388 
F N "puts" 2 649 ""
V L "string" 2 649 "*int8" `391 
V L "stream" 2 649 "int8" `392 
F B "puts" 2 649 "void(*int8 string,int8 stream)" `390 
F N "getch" 2 650 ""
F B "getch" 2 650 "int8()" `393 
F N "getch" 2 651 ""
V L "stream" 2 651 "int8" `395 
F B "getch" 2 651 "int8(int8 stream)" `394 
F N "gets" 2 652 ""
V L "string" 2 652 "*int8" `397 
F B "gets" 2 652 "void(*int8 string)" `396 
F N "gets" 2 653 ""
V L "string" 2 653 "*int8" `399 
V L "stream" 2 653 "int8" `400 
F B "gets" 2 653 "void(*int8 string,int8 stream)" `398 
F N "kbhit" 2 654 ""
F B "kbhit" 2 654 "int8()" `401 
F N "kbhit" 2 655 ""
V L "stream" 2 655 "int8" `403 
F B "kbhit" 2 655 "int8(int8 stream)" `402 
F N "printf" 2 656 ""
V L "string" 2 656 "*int8" `405 
F B "printf" 2 656 "void(*int8 string,*int8 _VA_LIST)" `404 
F N "fprintf" 2 657 ""
V L "stream" 2 657 "int8" `408 
V L "string" 2 657 "*int8" `409 
F B "fprintf" 2 657 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `407 
F N "putc_send" 2 658 ""
F B "putc_send" 2 658 "void()" `411 
F N "fputc_send" 2 659 ""
V L "stream" 2 659 "int8" `413 
F B "fputc_send" 2 659 "void(int8 stream)" `412 
F N "rcv_buffer_full" 2 660 ""
F B "rcv_buffer_full" 2 660 "int8()" `414 
F N "rcv_buffer_full" 2 661 ""
V L "stream" 2 661 "int8" `416 
F B "rcv_buffer_full" 2 661 "int8(int8 stream)" `415 
F N "rcv_buffer_bytes" 2 662 ""
F B "rcv_buffer_bytes" 2 662 "int16()" `417 
F N "rcv_buffer_bytes" 2 663 ""
V L "stream" 2 663 "int8" `419 
F B "rcv_buffer_bytes" 2 663 "int16(int8 stream)" `418 
F N "tx_buffer_full" 2 664 ""
F B "tx_buffer_full" 2 664 "int8()" `420 
F N "tx_buffer_full" 2 665 ""
V L "stream" 2 665 "int8" `422 
F B "tx_buffer_full" 2 665 "int8(int8 stream)" `421 
F N "tx_buffer_bytes" 2 666 ""
F B "tx_buffer_bytes" 2 666 "int16()" `423 
F N "tx_buffer_bytes" 2 667 ""
V L "stream" 2 667 "int8" `425 
F B "tx_buffer_bytes" 2 667 "int16(int8 stream)" `424 
F N "linbus_header" 2 668 ""
V L "identifier" 2 668 "int8" `427 
F B "linbus_header" 2 668 "int8(int8 identifier)" `426 
F N "linbus_header" 2 669 ""
V L "stream" 2 669 "int8" `429 
V L "identifier" 2 669 "int8" `430 
F B "linbus_header" 2 669 "int8(int8 stream,int8 identifier)" `428 
F N "linbus_header_hit" 2 670 ""
F B "linbus_header_hit" 2 670 "int8()" `431 
F N "linbus_header_hit" 2 671 ""
V L "stream" 2 671 "int8" `433 
F B "linbus_header_hit" 2 671 "int8(int8 stream)" `432 
F N "linbus_header_get" 2 672 ""
F B "linbus_header_get" 2 672 "int8()" `434 
F N "linbus_header_get" 2 673 ""
V L "stream" 2 673 "int8" `436 
F B "linbus_header_get" 2 673 "int8(int8 stream)" `435 
F N "linbus_rx_response" 2 674 ""
V L "DataPtr" 2 674 "*int8" `438 
V L "count" 2 674 "int8" `439 
F B "linbus_rx_response" 2 674 "int8(*int8 DataPtr,int8 count)" `437 
F N "linbus_rx_response" 2 675 ""
V L "stream" 2 675 "int8" `441 
V L "DataPtr" 2 675 "*int8" `442 
V L "count" 2 675 "int8" `443 
F B "linbus_rx_response" 2 675 "int8(int8 stream,*int8 DataPtr,int8 count)" `440 
F N "linbus_tx_response" 2 676 ""
V L "DataPtr" 2 676 "*int8" `445 
V L "count" 2 676 "int8" `446 
F B "linbus_tx_response" 2 676 "void(*int8 DataPtr,int8 count)" `444 
F N "linbus_tx_response" 2 677 ""
V L "stream" 2 677 "int8" `448 
V L "DataPtr" 2 677 "*int8" `449 
V L "count" 2 677 "int8" `450 
F B "linbus_tx_response" 2 677 "void(int8 stream,*int8 DataPtr,int8 count)" `447 
F N "linbus_checksum_type" 2 678 ""
V L "type" 2 678 "int8" `452 
F B "linbus_checksum_type" 2 678 "void(int8 type)" `451 
F N "linbus_checksum_type" 2 679 ""
V L "stream" 2 679 "int8" `454 
V L "type" 2 679 "int8" `455 
F B "linbus_checksum_type" 2 679 "void(int8 stream,int8 type)" `453  "#use i2c() Prototypes:"
F N "i2c_read" 2 682 ""
F B "i2c_read" 2 682 "int8()" `456 
F N "i2c_read" 2 683 ""
V L "ack" 2 683 "int8" `458 
F B "i2c_read" 2 683 "int8(int8 ack)" `457 
F N "i2c_read" 2 684 ""
V L "stream" 2 684 "int8" `460 
V L "ack" 2 684 "int8" `461 
F B "i2c_read" 2 684 "int8(int8 stream,int8 ack)" `459 
F N "i2c_write" 2 685 ""
V L "data" 2 685 "int8" `463 
F B "i2c_write" 2 685 "int8(int8 data)" `462 
F N "i2c_write" 2 686 ""
V L "stream" 2 686 "int8" `465 
V L "data" 2 686 "int8" `466 
F B "i2c_write" 2 686 "int8(int8 stream,int8 data)" `464 
F N "i2c_start" 2 687 ""
F B "i2c_start" 2 687 "void()" `467 
F N "i2c_start" 2 688 ""
V L "stream" 2 688 "int8" `469 
F B "i2c_start" 2 688 "void(int8 stream)" `468 
F N "i2c_start" 2 689 ""
V L "stream" 2 689 "int8" `471 
V L "restart" 2 689 "int8" `472 
F B "i2c_start" 2 689 "void(int8 stream,int8 restart)" `470 
F N "i2c_stop" 2 690 ""
F B "i2c_stop" 2 690 "void()" `473 
F N "i2c_stop" 2 691 ""
V L "stream" 2 691 "int8" `475 
F B "i2c_stop" 2 691 "void(int8 stream)" `474 
F N "i2c_isr_state" 2 692 ""
F B "i2c_isr_state" 2 692 "int8()" `476 
F N "i2c_slaveaddr" 2 693 ""
V L "addr" 2 693 "int8" `478 
F B "i2c_slaveaddr" 2 693 "void(int8 addr)" `477 
F N "i2c_slaveaddr" 2 694 ""
V L "stream" 2 694 "int8" `480 
V L "addr" 2 694 "int8" `481 
F B "i2c_slaveaddr" 2 694 "void(int8 stream,int8 addr)" `479 
F N "i2c_poll" 2 695 ""
F B "i2c_poll" 2 695 "int8()" `482 
F N "i2c_poll" 2 696 ""
V L "stream" 2 696 "int8" `484 
F B "i2c_poll" 2 696 "int8(int8 stream)" `483 
F N "i2c_init" 2 697 ""
V L "baud" 2 697 "int32" `486 
F B "i2c_init" 2 697 "void(int32 baud)" `485 
F N "i2c_init" 2 698 ""
V L "stream" 2 698 "int8" `488 
V L "baud" 2 698 "int32" `489 
F B "i2c_init" 2 698 "void(int8 stream,int32 baud)" `487 
F N "i2c_transfer" 2 699 ""
V L "address" 2 699 "int8" `491 
V L "wData" 2 699 "*int8" `492 
V L "wCount" 2 699 "int8" `493 
F B "i2c_transfer" 2 699 "int8(int8 address,*int8 wData,int8 wCount)" `490 
F N "i2c_transfer" 2 700 ""
V L "address" 2 700 "int8" `495 
V L "wData" 2 700 "*int8" `496 
V L "wCount" 2 700 "int8" `497 
V L "rData" 2 700 "*int8" `498 
V L "rCount" 2 700 "*int8" `499 
F B "i2c_transfer" 2 700 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `494 
F N "i2c_transfer" 2 701 ""
V L "stream" 2 701 "int8" `501 
V L "address" 2 701 "int8" `502 
V L "wData" 2 701 "*int8" `503 
V L "wCount" 2 701 "int8" `504 
F B "i2c_transfer" 2 701 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `500 
F N "i2c_transfer" 2 702 ""
V L "stream" 2 702 "int8" `506 
V L "address" 2 702 "int8" `507 
V L "wData" 2 702 "*int8" `508 
V L "wCount" 2 702 "int8" `509 
V L "rData" 2 702 "*int8" `510 
V L "rCount" 2 702 "*int8" `511 
F B "i2c_transfer" 2 702 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `505 
F N "i2c_transfer_out" 2 703 ""
V L "address" 2 703 "int8" `513 
V L "wData" 2 703 "*int8" `514 
V L "wCount" 2 703 "int8" `515 
F B "i2c_transfer_out" 2 703 "int8(int8 address,*int8 wData,int8 wCount)" `512 
F N "i2c_transfer_out" 2 704 ""
V L "stream" 2 704 "int8" `517 
V L "address" 2 704 "int8" `518 
V L "wData" 2 704 "*int8" `519 
V L "wCount" 2 704 "int8" `520 
F B "i2c_transfer_out" 2 704 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `516 
F N "i2c_transfer_in" 2 705 ""
V L "address" 2 705 "int8" `522 
V L "rData" 2 705 "*int8" `523 
V L "rCount" 2 705 "int8" `524 
F B "i2c_transfer_in" 2 705 "int8(int8 address,*int8 rData,int8 rCount)" `521 
F N "i2c_transfer_in" 2 706 ""
V L "stream" 2 706 "int8" `526 
V L "address" 2 706 "int8" `527 
V L "rData" 2 706 "*int8" `528 
V L "rCount" 2 706 "int8" `529 
F B "i2c_transfer_in" 2 706 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `525  "#use spi() Prototypes:"
F N "spi_xfer" 2 709 ""
F B "spi_xfer" 2 709 "int8()" `530 
F N "spi_xfer" 2 710 ""
f G "spi_xfer" 2 710 "int16(int8 data)" `531 
F N "spi_xfer" 2 711 ""
f G "spi_xfer" 2 711 "int32(int8 data)" `531 
F N "spi_xfer" 2 712 ""
V L "data" 2 712 "int8" `532 
F B "spi_xfer" 2 712 "int8(int8 data)" `531 
F N "spi_xfer" 2 713 ""
V L "data" 2 713 "int16" `534 
F B "spi_xfer" 2 713 "int16(int16 data)" `533 
F N "spi_xfer" 2 714 ""
V L "data" 2 714 "int32" `536 
F B "spi_xfer" 2 714 "int32(int32 data)" `535 
F N "spi_xfer" 2 715 ""
V L "stream" 2 715 "int8" `538 
V L "data" 2 715 "int8" `539 
F B "spi_xfer" 2 715 "int8(int8 stream,int8 data)" `537 
F N "spi_xfer" 2 716 ""
V L "stream" 2 716 "int8" `541 
V L "data" 2 716 "int16" `542 
F B "spi_xfer" 2 716 "int16(int8 stream,int16 data)" `540 
F N "spi_xfer" 2 717 ""
V L "stream" 2 717 "int8" `544 
V L "data" 2 717 "int32" `545 
F B "spi_xfer" 2 717 "int32(int8 stream,int32 data)" `543 
F N "spi_xfer" 2 718 ""
V L "stream" 2 718 "int8" `547 
V L "data" 2 718 "int8" `548 
V L "bits" 2 718 "int8" `549 
F B "spi_xfer" 2 718 "int8(int8 stream,int8 data,int8 bits)" `546 
F N "spi_xfer" 2 719 ""
V L "stream" 2 719 "int8" `551 
V L "data" 2 719 "int16" `552 
V L "bits" 2 719 "int8" `553 
F B "spi_xfer" 2 719 "int16(int8 stream,int16 data,int8 bits)" `550 
F N "spi_xfer" 2 720 ""
V L "stream" 2 720 "int8" `555 
V L "data" 2 720 "int32" `556 
V L "bits" 2 720 "int8" `557 
F B "spi_xfer" 2 720 "int32(int8 stream,int32 data,int8 bits)" `554 
F N "spi_init" 2 721 ""
V L "baud" 2 721 "int32" `559 
F B "spi_init" 2 721 "void(int32 baud)" `558 
F N "spi_init" 2 722 ""
V L "stream" 2 722 "int8" `561 
V L "baud" 2 722 "int32" `562 
F B "spi_init" 2 722 "void(int8 stream,int32 baud)" `560 
F N "spi_speed" 2 723 ""
V L "baud" 2 723 "int32" `564 
F B "spi_speed" 2 723 "void(int32 baud)" `563 
F N "spi_speed" 2 724 ""
V L "stream" 2 724 "int8" `566 
V L "baud" 2 724 "int32" `567 
F B "spi_speed" 2 724 "void(int8 stream,int32 baud)" `565 
F N "spi_speed" 2 725 ""
V L "stream" 2 725 "int8" `569 
V L "baud" 2 725 "int32" `570 
V L "clock" 2 725 "int32" `571 
F B "spi_speed" 2 725 "void(int8 stream,int32 baud,int32 clock)" `568 
F N "spi_prewrite" 2 726 ""
V L "data" 2 726 "int8" `573 
F B "spi_prewrite" 2 726 "void(int8 data)" `572 
F N "spi_prewrite" 2 727 ""
V L "data" 2 727 "int16" `575 
F B "spi_prewrite" 2 727 "void(int16 data)" `574 
F N "spi_prewrite" 2 728 ""
V L "data" 2 728 "int32" `577 
F B "spi_prewrite" 2 728 "void(int32 data)" `576 
F N "spi_prewrite" 2 729 ""
V L "??65535" 2 729 "int8" `579 
V L "data" 2 729 "int8" `580 
F B "spi_prewrite" 2 729 "void(int8 ,int8 data)" `578 
F N "spi_prewrite" 2 730 ""
V L "??65535" 2 730 "int8" `582 
V L "data" 2 730 "int16" `583 
F B "spi_prewrite" 2 730 "void(int8 ,int16 data)" `581 
F N "spi_prewrite" 2 731 ""
V L "??65535" 2 731 "int8" `585 
V L "data" 2 731 "int32" `586 
F B "spi_prewrite" 2 731 "void(int8 ,int32 data)" `584 
F N "spi_xfer_in" 2 732 ""
F B "spi_xfer_in" 2 732 "int8()" `587 
F N "spi_xfer_in" 2 733 ""
f G "spi_xfer_in" 2 733 "int16(int8 bits)" `588 
F N "spi_xfer_in" 2 734 ""
f G "spi_xfer_in" 2 734 "int32(int8 bits)" `588 
F N "spi_xfer_in" 2 735 ""
V L "bits" 2 735 "int8" `589 
F B "spi_xfer_in" 2 735 "int8(int8 bits)" `588 
F N "spi_xfer_in" 2 736 ""
V L "bits" 2 736 "int8" `591 
f G "spi_xfer_in" 2 736 "int16(int8 bits,int8 bits)" `590 
F N "spi_xfer_in" 2 737 ""
V L "bits" 2 737 "int8" `591 
f G "spi_xfer_in" 2 737 "int32(int8 bits,int8 bits)" `590 
F N "spi_xfer_in" 2 738 ""
V L "stream" 2 738 "int8" `591 
V L "bits" 2 738 "int8" `592 
F B "spi_xfer_in" 2 738 "int8(int8 stream,int8 bits)" `590 
F N "spi_xfer_in" 2 739 ""
V L "stream" 2 739 "int8" `591 
V L "bits" 2 739 "int8" `595 
f G "spi_xfer_in" 2 739 "int16(int8 stream,int8 bits,int16 count)" `593 
F N "spi_xfer_in" 2 740 ""
V L "stream" 2 740 "int8" `591 
V L "bits" 2 740 "int8" `595 
f G "spi_xfer_in" 2 740 "int32(int8 stream,int8 bits,int16 count)" `593 
F N "spi_transfer" 2 741 ""
V L "wData" 2 741 "*int8" `594 
V L "rData" 2 741 "*int8" `595 
V L "count" 2 741 "int16" `596 
F B "spi_transfer" 2 741 "void(*int8 wData,*int8 rData,int16 count)" `593 
F N "spi_transfer" 2 742 ""
V L "stream" 2 742 "int8" `598 
V L "wData" 2 742 "*int8" `599 
V L "rData" 2 742 "*int8" `600 
V L "count" 2 742 "int16" `601 
F B "spi_transfer" 2 742 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `597 
F N "spi_transfer_write" 2 743 ""
V L "wData" 2 743 "*int8" `603 
V L "count" 2 743 "int16" `604 
F B "spi_transfer_write" 2 743 "void(*int8 wData,int16 count)" `602 
F N "spi_transfer_write" 2 744 ""
V L "stream" 2 744 "int8" `606 
V L "wData" 2 744 "*int8" `607 
V L "count" 2 744 "int16" `608 
F B "spi_transfer_write" 2 744 "void(int8 stream,*int8 wData,int16 count)" `605 
F N "spi_transfer_read" 2 745 ""
V L "rData" 2 745 "*int8" `610 
V L "count" 2 745 "int16" `611 
F B "spi_transfer_read" 2 745 "void(*int8 rData,int16 count)" `609 
F N "spi_transfer_read" 2 746 ""
V L "stream" 2 746 "int8" `613 
V L "rData" 2 746 "*int8" `614 
V L "count" 2 746 "int16" `615 
F B "spi_transfer_read" 2 746 "void(int8 stream,*int8 rData,int16 count)" `612  "#use rtos() Prototypes:"
F N "rtos_run" 2 749 ""
F B "rtos_run" 2 749 "void()" `616 
F N "rtos_yield" 2 750 ""
F B "rtos_yield" 2 750 "void()" `617 
F N "rtos_enable" 2 751 ""
V L "task" 2 751 "int8" `619 
F B "rtos_enable" 2 751 "void(int8 task)" `618 
F N "rtos_disable" 2 752 ""
V L "task" 2 752 "int8" `621 
F B "rtos_disable" 2 752 "void(int8 task)" `620 
F N "rtos_terminate" 2 753 ""
F B "rtos_terminate" 2 753 "void()" `622 
F N "rtos_await" 2 754 ""
V L "flag" 2 754 "int8" `624 
F B "rtos_await" 2 754 "void(int8 flag)" `623 
F N "rtos_wait" 2 755 ""
V L "sem" 2 755 "int8" `626 
F B "rtos_wait" 2 755 "void(int8 sem)" `625 
F N "rtos_signal" 2 756 ""
V L "sem" 2 756 "int8" `628 
F B "rtos_signal" 2 756 "void(int8 sem)" `627 
F N "rtos_msg_send" 2 757 ""
V L "task" 2 757 "int8" `630 
V L "msg" 2 757 "int8" `631 
F B "rtos_msg_send" 2 757 "void(int8 task,int8 msg)" `629 
F N "rtos_msg_read" 2 758 ""
F B "rtos_msg_read" 2 758 "int8()" `632 
F N "rtos_msg_poll" 2 759 ""
F B "rtos_msg_poll" 2 759 "int8()" `633 
F N "rtos_overrun" 2 760 ""
V L "task" 2 760 "int8" `635 
F B "rtos_overrun" 2 760 "int8(int8 task)" `634 
F N "rtos_stats" 2 761 ""
V L "task" 2 761 "int8" `637 
V L "stat" 2 761 "*int8" `638 
F B "rtos_stats" 2 761 "void(int8 task,*int8 stat)" `636  "#use timer() Prototypes:"
F N "get_ticks" 2 764 ""
F B "get_ticks" 2 764 "int8()" `639 
F N "get_ticks" 2 765 ""
f G "get_ticks" 2 765 "int16(int8 stream)" `640 
F N "get_ticks" 2 766 ""
f G "get_ticks" 2 766 "int32(int8 stream)" `640 
F N "get_ticks" 2 767 ""
V L "stream" 2 767 "int8" `641 
F B "get_ticks" 2 767 "int8(int8 stream)" `640 
F N "get_ticks" 2 768 ""
V L "stream" 2 768 "int8" `643 
f G "get_ticks" 2 768 "int16(int8 stream)" `642 
F N "get_ticks" 2 769 ""
V L "stream" 2 769 "int8" `643 
f G "get_ticks" 2 769 "int32(int8 stream)" `642 
F N "set_ticks" 2 770 ""
V L "value" 2 770 "int8" `643 
F B "set_ticks" 2 770 "void(int8 value)" `642 
F N "set_ticks" 2 771 ""
V L "value" 2 771 "int16" `645 
F B "set_ticks" 2 771 "void(int16 value)" `644 
F N "set_ticks" 2 772 ""
V L "value" 2 772 "int32" `647 
F B "set_ticks" 2 772 "void(int32 value)" `646 
F N "set_ticks" 2 773 ""
V L "stream" 2 773 "int8" `649 
V L "value" 2 773 "int8" `650 
F B "set_ticks" 2 773 "void(int8 stream,int8 value)" `648 
F N "set_ticks" 2 774 ""
V L "stream" 2 774 "int8" `652 
V L "value" 2 774 "int16" `653 
F B "set_ticks" 2 774 "void(int8 stream,int16 value)" `651 
F N "set_ticks" 2 775 ""
V L "stream" 2 775 "int8" `655 
V L "value" 2 775 "int32" `656 
F B "set_ticks" 2 775 "void(int8 stream,int32 value)" `654  "#use pwm() Prototypes:"
F N "pwm_on" 2 778 ""
F B "pwm_on" 2 778 "void()" `657 
F N "pwm_on" 2 779 ""
V L "stream" 2 779 "int8" `659 
F B "pwm_on" 2 779 "void(int8 stream)" `658 
F N "pwm_off" 2 780 ""
F B "pwm_off" 2 780 "void()" `660 
F N "pwm_off" 2 781 ""
V L "stream" 2 781 "int8" `662 
F B "pwm_off" 2 781 "void(int8 stream)" `661 
F N "pwm_set_duty" 2 782 ""
V L "duty" 2 782 "int16" `664 
F B "pwm_set_duty" 2 782 "void(int16 duty)" `663 
F N "pwm_set_duty" 2 783 ""
V L "stream" 2 783 "int8" `666 
V L "duty" 2 783 "int16" `667 
F B "pwm_set_duty" 2 783 "void(int8 stream,int16 duty)" `665 
F N "pwm_set_duty_percent" 2 784 ""
V L "percent" 2 784 "int16" `669 
F B "pwm_set_duty_percent" 2 784 "void(int16 percent)" `668 
F N "pwm_set_duty_percent" 2 785 ""
V L "stream" 2 785 "int8" `671 
V L "percent" 2 785 "int16" `672 
F B "pwm_set_duty_percent" 2 785 "void(int8 stream,int16 percent)" `670 
F N "pwm_set_frequency" 2 786 ""
V L "frequency" 2 786 "int32" `674 
F B "pwm_set_frequency" 2 786 "void(int32 frequency)" `673 
F N "pwm_set_frequency" 2 787 ""
V L "stream" 2 787 "int8" `676 
V L "frequency" 2 787 "int32" `677 
F B "pwm_set_frequency" 2 787 "void(int8 stream,int32 frequency)" `675 
F N "pwm_get_duty_period" 2 788 ""
F B "pwm_get_duty_period" 2 788 "int16()" `678 
F N "pwm_get_duty_period" 2 789 ""
V L "stream" 2 789 "int8" `680 
F B "pwm_get_duty_period" 2 789 "int16(int8 stream)" `679  "#use capture() Prototypes:"
F N "get_capture_time" 2 792 ""
F B "get_capture_time" 2 792 "int16()" `681 
F N "get_capture_time" 2 793 ""
V L "stream" 2 793 "int8" `683 
F B "get_capture_time" 2 793 "int16(int8 stream)" `682 
F N "get_capture_event" 2 794 ""
F B "get_capture_event" 2 794 "int8()" `684 
F N "get_capture_event" 2 795 ""
V L "stream" 2 795 "int8" `686 
F B "get_capture_event" 2 795 "int8(int8 stream)" `685  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
F N "goto_address" 2 808 ""
V L "address" 2 808 "int16" `688 
F B "goto_address" 2 808 "void(int16 address)" `687 
F N "label_address" 2 809 ""
V L "label" 2 809 "int16" `690 
F B "label_address" 2 809 "int16(int16 label)" `689  "Program Memory Read Prototypes:"
F N "read_program_memory" 2 812 ""
V L "address" 2 812 "int16" `692 
V L "DataPtr" 2 812 "*int8" `693 
V L "count" 2 812 "int16" `694 
F B "read_program_memory" 2 812 "void(int16 address,*int8 DataPtr,int16 count)" `691 
F N "read_program_eeprom" 2 813 ""
V L "address" 2 813 "int16" `696 
F B "read_program_eeprom" 2 813 "int16(int16 address)" `695  "Program Memory Write Prototypes:"
F N "erase_program_eeprom" 2 816 ""
V L "address" 2 816 "int16" `698 
F B "erase_program_eeprom" 2 816 "void(int16 address)" `697 
F N "write_program_memory" 2 817 ""
V L "address" 2 817 "int16" `700 
V L "DataPtr" 2 817 "*int8" `701 
V L "count" 2 817 "int16" `702 
F B "write_program_memory" 2 817 "void(int16 address,*int8 DataPtr,int16 count)" `699 
F N "write_program_eeprom" 2 818 ""
V L "address" 2 818 "int16" `704 
V L "data" 2 818 "int16" `705 
F B "write_program_eeprom" 2 818 "void(int16 address,int16 data)" `703  "EEPROM Prototypes:"
D G "__EEADDRESS__" 2 825 "unsigned int8"
F N "read_eeprom" 2 828 ""
V L "address" 2 828 "int8" `707 
F B "read_eeprom" 2 828 "int8(int8 address)" `706 
F N "write_eeprom" 2 829 ""
V L "address" 2 829 "int8" `709 
V L "value" 2 829 "int8" `710 
F B "write_eeprom" 2 829 "void(int8 address,int8 value)" `708  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
F N "enable_interrupts" 2 836 ""
V L "interrupt" 2 836 "int32" `712 
F B "enable_interrupts" 2 836 "void(int32 interrupt)" `711 
F N "disable_interrupts" 2 837 ""
V L "interrupt" 2 837 "int32" `714 
F B "disable_interrupts" 2 837 "void(int32 interrupt)" `713 
F N "clear_interrupt" 2 838 ""
V L "interrupt" 2 838 "int32" `716 
F B "clear_interrupt" 2 838 "void(int32 interrupt)" `715 
F N "interrupt_active" 2 839 ""
V L "interrupt" 2 839 "int32" `718 
F B "interrupt_active" 2 839 "int8(int32 interrupt)" `717 
F N "interrupt_enabled" 2 840 ""
V L "interrupt" 2 840 "int32" `720 
F B "interrupt_enabled" 2 840 "int8(int32 interrupt)" `719 
F N "ext_int_edge" 2 841 ""
V L "source" 2 841 "int8" `722 
V L "edge" 2 841 "int8" `723 
F B "ext_int_edge" 2 841 "void(int8 source,int8 edge)" `721 
F N "jump_to_isr" 2 842 ""
V L "address" 2 842 "int16" `725 
F B "jump_to_isr" 2 842 "void(int16 address)" `724  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 844 "0x40"
D G "H_TO_L" 2 845 "0"
D G "GLOBAL" 2 847 "0xF2C0"
D G "PERIPH" 2 848 "0xF240"
D G "INT_RTCC" 2 849 "0x00F220"
D G "INT_TIMER0" 2 850 "0x00F220"
D G "INT_TIMER1" 2 851 "0x009D01"
D G "INT_TIMER2" 2 852 "0x009D02"
D G "INT_TIMER3" 2 853 "0x00A002"
D G "INT_EXT_L2H" 2 854 "0x5000F210"
D G "INT_EXT_H2L" 2 855 "0x6000F210"
D G "INT_EXT" 2 856 "0x00F210"
D G "INT_EXT1_L2H" 2 857 "0x5001F008"
D G "INT_EXT1_H2L" 2 858 "0x6001F008"
D G "INT_EXT1" 2 859 "0x00F008"
D G "INT_EXT2_L2H" 2 860 "0x5002F010"
D G "INT_EXT2_H2L" 2 861 "0x6002F010"
D G "INT_EXT2" 2 862 "0x00F010"
D G "INT_RB" 2 863 "0x00FFF208"
D G "INT_PSP" 2 864 "0x009D80"
D G "INT_AD" 2 865 "0x009D40"
D G "INT_RDA" 2 866 "0x009D20"
D G "INT_TBE" 2 867 "0x009D10"
D G "INT_SSP" 2 868 "0x009D08"
D G "INT_CCP1" 2 869 "0x009D04"
D G "INT_CCP2" 2 870 "0x00A001"
D G "INT_BUSCOL" 2 871 "0x00A008"
D G "INT_LOWVOLT" 2 872 "0x00A004"
D G "INT_COMP" 2 873 "0x00A040"
D G "INT_EEPROM" 2 874 "0x00A010"
D G "INT_OSCF" 2 875 "0x00A080"
D G "INT_HLVD" 2 876 "0x00A004"
C L "jump_to_isr" 1 7 1 "FUNCTION"
C L "jump_to_isr" 3 3 6 "FUNCTION"
V G "second" 3 11 "int8" `738 
V G "minute" 3 11 "int8" `739 
V G "hour" 3 11 "int8" `740 
V G "date" 3 11 "int8" `741 
V G "month" 3 11 "int8" `742 
V G "year" 3 11 "int8" `743 
V G "day" 3 11 "int8" `744 
V G "utc_hour" 3 12 "int8" `745 
F N "ds1307_display" 3 14 ""
F G "ds1307_display" 3 14 "void()" `746  "Convert BCD to decimal"
C L "ds1307_display" 3 3 3 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 2 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "ds1307_display" 3 3 1 "FUNCTION"
C L "write_Seconds" 3 3 1 "FUNCTION"
F N "write_Seconds" 3 159 ""
F G "write_Seconds" 3 160 "void()" `792 
C L "write_Seconds" 3 3 1 "FUNCTION"
C L "write_Seconds" 3 3 1 "FUNCTION"
C L "write_Seconds" 3 3 1 "FUNCTION"
F N "Write_Minutes" 3 169 ""
F G "Write_Minutes" 3 170 "void()" `793 
C L "Write_Minutes" 3 3 1 "FUNCTION"
C L "Write_Minutes" 3 3 1 "FUNCTION"
C L "Write_Minutes" 3 3 1 "FUNCTION"
F N "Write_Hours" 3 180 ""
F G "Write_Hours" 3 181 "void()" `794 
C L "Write_Hours" 3 3 1 "FUNCTION"
C L "Write_Hours" 3 3 1 "FUNCTION"
C L "Write_Hours" 3 3 1 "FUNCTION"
F N "Write_Days" 3 191 ""
F G "Write_Days" 3 192 "void()" `795 
C L "Write_Days" 3 3 1 "FUNCTION"
C L "Write_Days" 3 3 1 "FUNCTION"
C L "Write_Days" 3 3 1 "FUNCTION"
F N "Write_Date" 3 202 ""
F G "Write_Date" 3 203 "void()" `796 
C L "Write_Date" 3 3 1 "FUNCTION"
C L "Write_Date" 3 3 1 "FUNCTION"
C L "Write_Date" 3 3 1 "FUNCTION"
F N "Write_Months" 3 213 ""
F G "Write_Months" 3 214 "void()" `797 
C L "Write_Months" 3 3 1 "FUNCTION"
C L "Write_Months" 3 3 1 "FUNCTION"
C L "Write_Months" 3 3 1 "FUNCTION"
F N "Write_Years" 3 224 ""
F G "Write_Years" 3 225 "void()" `798 
C L "Write_Years" 3 3 1 "FUNCTION"
C L "Write_Years" 3 3 1 "FUNCTION"
C L "Write_Years" 3 3 1 "FUNCTION"
F N "Read_All_RTC_Regs" 3 234 ""
F G "Read_All_RTC_Regs" 3 235 "void()" `799 
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
F N "Read_All_RTC_Regs_At_Start" 3 253 ""
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
F G "Read_All_RTC_Regs_At_Start" 3 254 "void()" `800 
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
C L "Read_All_RTC_Regs_At_Start" 3 3 1 "FUNCTION"
D G "PB_increment" 4 27 "pin_B4"
D G "PB_Save_Time" 4 28 "pin_B5"
V G "loop5" 4 31 "int8" `801 
V G "value" 4 32 "int8" `802 
V G "temp" 4 33 "int8" `803 
F N "Template" 4 35 ""
F G "Template" 4 36 "void()" `804 
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
C L "Template" 4 6 1 "FUNCTION"
F N "Manual_Set_Time" 4 55 ""
F G "Manual_Set_Time" 4 55 "void()" `809 
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 5 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Manual_Set_Time" 4 6 1 "FUNCTION"
C L "Display_All_Regs" 4 6 1 "FUNCTION"
F N "Display_All_Regs" 5 5 ""
F G "Display_All_Regs" 5 5 "void()" `826  "Convert BCD to decimal"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
C L "Display_All_Regs" 5 13 1 "FUNCTION"
V G "time" 6 1 "int8" `832 
F N "SetDate" 6 3 ""
V L "MyDay" 6 3 "int8" `834 
F G "SetDate" 6 4 "void(int8 MyDay)" `833 
D G "_STRING" 7 12 ""
D G "_STDDEF" 8 13 ""
D G "ptrdiff_t" 8 18 "unsigned int16"
D G "size_t" 8 24 "unsigned int16"
D G "wchar_t" 8 26 "unsigned char"
D G "NULL" 8 27 "0"
D G "offsetof" 8 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 9 12 ""
D G "islower" 9 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 9 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 9 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 9 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 9 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 9 19 "(x)  ((x)==' ')"
D G "isxdigit" 9 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 9 21 "(x)  ((x)<' ')"
D G "isprint" 9 22 "(x)  ((x)>=' ')"
D G "isgraph" 9 23 "(x)  ((x)>' ')"
D G "ispunct" 9 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 7 34 ""
V L "s1" 7 34 "*void" `836 
V L "s2" 7 34 "*void" `837 
V L "n" 7 34 "int16" `838 
F G "memmove" 7 35 "*int8(*void s1,*void s2,int16 n)" `835 
V L "sc1" 7 36 "*int8" `839 
V L "sc2" 7 37 "*int8" `840 
D G "strcopy" 7 54 "strcpy"
C L "strncpy" 7 19 4 "FUNCTION"
F N "strncpy" 7 61 ""
V L "s1" 7 61 "*int8" `842 
V L "s2" 7 61 "*int8" `843 
V L "n" 7 61 "int16" `844 
F G "strncpy" 7 62 "*int8(*int8 s1,*int8 s2,int16 n)" `841 
V L "s" 7 63 "*int8" `845 
C L "strcat" 7 19 3 "FUNCTION"
F N "strcat" 7 78 ""
V L "s1" 7 78 "*int8" `847 
V L "s2" 7 78 "*int8" `848 
F G "strcat" 7 79 "*int8(*int8 s1,*int8 s2)" `846 
V L "s" 7 80 "*int8" `849 
C L "strncat" 7 19 2 "FUNCTION"
F N "strncat" 7 96 ""
V L "s1" 7 96 "*int8" `851 
V L "s2" 7 96 "*int8" `852 
V L "n" 7 96 "int16" `853 
F G "strncat" 7 97 "*int8(*int8 s1,*int8 s2,int16 n)" `850 
V L "s" 7 98 "*int8" `854 
C L "memcmp" 7 19 3 "FUNCTION"
F N "memcmp" 7 120 ""
V L "s1" 7 120 "*void" `856 
V L "s2" 7 120 "*void" `857 
V L "n" 7 120 "int16" `858 
F G "memcmp" 7 121 "sint8(*void s1,*void s2,int16 n)" `855 
V L "su1" 7 122 "*int8" `859 
V L "su2" 7 122 "*int8" `860 
C L "strcmp" 7 19 2 "FUNCTION"
F N "strcmp" 7 134 ""
V L "s1" 7 134 "*int8" `862 
V L "s2" 7 134 "*int8" `863 
F G "strcmp" 7 135 "sint8(*int8 s1,*int8 s2)" `861 
C L "strcoll" 7 19 2 "FUNCTION"
F N "strcoll" 7 144 ""
V L "s1" 7 144 "*int8" `865 
V L "s2" 7 144 "*int8" `866 
F G "strcoll" 7 145 "sint8(*int8 s1,*int8 s2)" `864 
C L "strncmp" 7 19 4 "FUNCTION"
F N "strncmp" 7 157 ""
V L "s1" 7 157 "*int8" `868 
V L "s2" 7 157 "*int8" `869 
V L "n" 7 157 "int16" `870 
F G "strncmp" 7 158 "sint8(*int8 s1,*int8 s2,int16 n)" `867 
C L "strxfrm" 7 19 4 "FUNCTION"
F N "strxfrm" 7 170 ""
V L "s1" 7 170 "*int8" `872 
V L "s2" 7 170 "*int8" `873 
V L "n" 7 170 "int16" `874 
F G "strxfrm" 7 171 "int16(*int8 s1,*int8 s2,int16 n)" `871 
V L "c" 7 172 "int8" `875 
V L "n1" 7 173 "int16" `876 
C L "strxfrm" 7 19 1 "FUNCTION"
C L "memchr" 7 19 3 "FUNCTION"
F N "memchr" 7 201 ""
V L "s" 7 201 "*void" `878 
V L "c" 7 201 "int8" `879 
V L "n" 7 201 "int16" `880 
F G "memchr" 7 202 "*int8(*void s,int8 c,int16 n)" `877 
V L "uc" 7 203 "int8" `881 
V L "su" 7 204 "*int8" `882 
C L "strchr" 7 19 2 "FUNCTION"
F N "strchr" 7 215 ""
V L "s" 7 215 "*int8" `884 
V L "c" 7 215 "int8" `885 
F G "strchr" 7 216 "*int8(*int8 s,int8 c)" `883 
C L "strcspn" 7 19 4 "FUNCTION"
F N "strcspn" 7 227 ""
V L "s1" 7 227 "*int8" `887 
V L "s2" 7 227 "*int8" `888 
F G "strcspn" 7 228 "int16(*int8 s1,*int8 s2)" `886 
V L "sc1" 7 229 "*int8" `889 
V L "sc2" 7 229 "*int8" `890 
C L "strpbrk" 7 19 4 "FUNCTION"
F N "strpbrk" 7 242 ""
V L "s1" 7 242 "*int8" `892 
V L "s2" 7 242 "*int8" `893 
F G "strpbrk" 7 243 "*int8(*int8 s1,*int8 s2)" `891 
V L "sc1" 7 244 "*int8" `894 
V L "sc2" 7 244 "*int8" `895 
C L "strrchr" 7 19 2 "FUNCTION"
F N "strrchr" 7 257 ""
V L "s" 7 257 "*int8" `897 
V L "c" 7 257 "int8" `898 
F G "strrchr" 7 258 "*int8(*int8 s,int8 c)" `896 
V L "p" 7 259 "*int8" `899 
C L "strspn" 7 19 2 "FUNCTION"
F N "strspn" 7 272 ""
V L "s1" 7 272 "*int8" `901 
V L "s2" 7 272 "*int8" `902 
F G "strspn" 7 273 "int16(*int8 s1,*int8 s2)" `900 
V L "sc1" 7 274 "*int8" `903 
V L "sc2" 7 274 "*int8" `904 
C L "strstr" 7 19 6 "FUNCTION"
F N "strstr" 7 291 ""
V L "s1" 7 291 "*int8" `906 
V L "s2" 7 291 "*int8" `907 
F G "strstr" 7 292 "*int8(*int8 s1,*int8 s2)" `905 
V L "s" 7 293 "*int8" `908 
V L "t" 7 293 "*int8" `909 
C L "strlen" 7 19 2 "FUNCTION"
F N "strlen" 7 318 ""
V L "s" 7 318 "*int8" `911 
F G "strlen" 7 319 "int16(*int8 s)" `910 
V L "sc" 7 320 "*int8" `912 
C L "strtok" 7 19 13 "FUNCTION"
F N "strtok" 7 341 ""
V L "s1" 7 341 "*int8" `914 
V L "s2" 7 341 "*int8" `915 
F G "strtok" 7 342 "*int8(*int8 s1,*int8 s2)" `913 
V L "beg" 7 343 "*int8" `916 
V L "end" 7 343 "*int8" `917 
V L "save" 7 344 "*int8" `918 
C L "stricmp" 7 19 6 "FUNCTION"
F N "stricmp" 7 392 ""
V L "s1" 7 392 "*int8" `920 
V L "s2" 7 392 "*int8" `921 
F G "stricmp" 7 393 "sint8(*int8 s1,*int8 s2)" `919 
C L "strlwr" 7 19 3 "FUNCTION"
F N "strlwr" 7 406 ""
V L "s" 7 406 "*int8" `925 
F G "strlwr" 7 407 "*int8(*int8 s)" `924 
V L "p" 7 408 "*int8" `926 
C L "strupr" 7 19 3 "FUNCTION"
F N "strupr" 7 420 ""
V L "s" 7 420 "*int8" `928 
F G "strupr" 7 421 "*int8(*int8 s)" `927 
V L "p" 7 422 "*int8" `929 
D G "_STDIO" 10 12 ""
D G "__INPUT_C__" 11 57 ""
D G "InputKbhit" 11 65 "()    kbhit()"
F N "InputPutc" 11 73 ""
V L "c" 11 73 "int8" `931 
F G "InputPutc" 11 73 "void(int8 c)" `930 
D G "InputGetc" 11 81 "()    getc()"
F N "gethex1" 11 85 ""
F G "gethex1" 11 85 "int8()" `932 
V L "digit" 11 86 "int8" `933 
F N "gethex" 11 98 ""
F G "gethex" 11 98 "int8()" `934 
V L "lo" 11 99 "int8" `935 
V L "hi" 11 99 "int8" `936 
F N "get_string" 11 109 ""
V L "s" 11 109 "*int8" `938 
V L "max" 11 109 "int8" `939 
F G "get_string" 11 109 "void(*int8 s,int8 max)" `937 
V L "len" 11 110 "int8" `940 
V L "c" 11 111 "int8" `941 
C L "get_string" 11 117 1 "FUNCTION"
F N "get_stringEdit" 11 134 ""
V L "s" 11 134 "*int8" `943 
V L "max" 11 134 "int8" `944 
F G "get_stringEdit" 11 134 "void(*int8 s,int8 max)" `942 
V L "len" 11 135 "int8" `945 
V L "c" 11 136 "int8" `946 
C L "get_stringEdit" 11 117 1 "FUNCTION"
D G "PB_Set_Time" 0 15 "PIN_B3"
F N "GetDate" 0 17 ""
V L "RawData" 0 17 "*int8" `950 
F G "GetDate" 0 18 "void(*int8 RawData)" `949 
V L "MyMonth" 0 19 "int8" `952 
F N "append" 0 25 ""
V L "s" 0 25 "*int8" `958 
V L "c" 0 25 "int8" `959 
F G "append" 0 25 "int8(*int8 s,int8 c)" `957 
V L "len" 0 26 "int8" `960 
V G "hr1" 0 34 "int8" `961 
V G "buffer" 0 35 "int8[22]" `962 
F N "MAIN" 0 38 ""
F G "MAIN" 0 39 "void()" `963 
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 2 "FUNCTION"
V L "date" 0 74 "int8[25]" `966 
V L "Tday" 0 75 "int8[2]" `967 
V L "pos" 0 76 "int8" `968 
V L "inByte" 0 77 "int8" `969  "Read_All_RTC_Regs(); put back after testing"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_write_slave" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_transfer" 3 6
F B "i2c_transfer_out" 3 4
F B "i2c_transfer_in" 3 4
F B "i2c_init" 1 2
