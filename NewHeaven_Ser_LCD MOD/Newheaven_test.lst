CCS PCH C Compiler, Version 5.115P, 47857               06-Jan-24 12:22

               Filename:   C:\jvc projects\18F26K22 Experiments\NewHeaven_Ser_LCD\Newheaven_test.lst

               ROM used:   4252 bytes (6%)
                           Largest free fragment is 61284
               RAM used:   18 (0%) at main() level
                           22 (1%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   0FFC
.................... 
.................... 
.................... 
.................... 
....................       
....................         #include <Hardware_Setup.h>
....................    
....................      #include <18f26k22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
00004:  DATA 53,55
00006:  DATA 4E,00
00008:  DATA 4D,4F
0000A:  DATA 4E,00
0000C:  DATA 54,55
0000E:  DATA 45,00
00010:  DATA 57,45
00012:  DATA 44,00
00014:  DATA 54,48
00016:  DATA 55,00
00018:  DATA 46,52
0001A:  DATA 49,00
0001C:  DATA 53,41
0001E:  DATA 54,00
00020:  DATA 4A,41
00022:  DATA 4E,00
00024:  DATA 46,45
00026:  DATA 42,00
00028:  DATA 4D,41
0002A:  DATA 52,00
0002C:  DATA 41,50
0002E:  DATA 52,00
00030:  DATA 4D,41
00032:  DATA 59,00
00034:  DATA 4A,55
00036:  DATA 4E,00
00038:  DATA 4A,55
0003A:  DATA 4C,00
0003C:  DATA 41,55
0003E:  DATA 47,00
00040:  DATA 53,45
00042:  DATA 50,00
00044:  DATA 4F,43
00046:  DATA 54,00
00048:  DATA 4E,4F
0004A:  DATA 56,00
0004C:  DATA 44,45
0004E:  DATA 43,00
00050:  DATA 57,42
00052:  DATA 39,49
00054:  DATA 58,53
00056:  DATA 20,55
00058:  DATA 54,43
0005A:  DATA 00,00
0005C:  DATA 43,4C
0005E:  DATA 4F,43
00060:  DATA 4B,00
00062:  DATA 55,54
00064:  DATA 20,20
00066:  DATA 20,3A
00068:  DATA 20,20
0006A:  DATA 00,00
0006C:  DATA 43,54
0006E:  DATA 20,20
00070:  DATA 20,3A
00072:  DATA 20,20
00074:  DATA 3A,20
00076:  DATA 20,00
00078:  DATA 48,72
0007A:  DATA 73,20
0007C:  DATA 61,72
0007E:  DATA 65,20
00080:  DATA 32,34
00082:  DATA 68,72
00084:  DATA 20,66
00086:  DATA 6F,72
00088:  DATA 6D,61
0008A:  DATA 74,00
0008C:  DATA 48,72
0008E:  DATA 73,20
00090:  DATA 61,72
00092:  DATA 65,20
00094:  DATA 43,54
00096:  DATA 20,74
00098:  DATA 69,6D
0009A:  DATA 65,20
0009C:  DATA 55,54
0009E:  DATA 43,00
000A0:  DATA 74,69
000A2:  DATA 6D,65
000A4:  DATA 20,69
000A6:  DATA 73,20
000A8:  DATA 61,75
000AA:  DATA 74,6F
000AC:  DATA 6D,61
000AE:  DATA 74,69
000B0:  DATA 63,00
000B2:  DATA 20,48
000B4:  DATA 6F,75
000B6:  DATA 72,73
000B8:  DATA 20,3D
000BA:  DATA 2D,3E
000BC:  DATA 20,25
000BE:  DATA 75,00
000C0:  DATA 53,65
000C2:  DATA 63,27
000C4:  DATA 73,20
000C6:  DATA 61,72
000C8:  DATA 65,20
000CA:  DATA 73,65
000CC:  DATA 74,20
000CE:  DATA 74,6F
000D0:  DATA 20,30
000D2:  DATA 20,00
000D4:  DATA 77,68
000D6:  DATA 65,6E
000D8:  DATA 20,6D
000DA:  DATA 69,6E
000DC:  DATA 27,73
000DE:  DATA 20,61
000E0:  DATA 72,65
000E2:  DATA 20,73
000E4:  DATA 61,76
000E6:  DATA 65,64
000E8:  DATA 00,00
000EA:  DATA 20,4D
000EC:  DATA 69,6E
000EE:  DATA 75,74
000F0:  DATA 65,73
000F2:  DATA 20,3D
000F4:  DATA 2D,3E
000F6:  DATA 20,25
000F8:  DATA 75,00
000FA:  DATA 31,3D
000FC:  DATA 53,75
000FE:  DATA 6E,32
00100:  DATA 3D,4D
00102:  DATA 6F,6E
00104:  DATA 33,3D
00106:  DATA 54,75
00108:  DATA 65,34
0010A:  DATA 3D,57
0010C:  DATA 65,64
0010E:  DATA 00,00
00110:  DATA 35,3D
00112:  DATA 54,68
00114:  DATA 75,36
00116:  DATA 3D,46
00118:  DATA 72,69
0011A:  DATA 37,3D
0011C:  DATA 53,61
0011E:  DATA 74,00
00120:  DATA 44,61
00122:  DATA 79,20
00124:  DATA 3D,2D
00126:  DATA 3E,25
00128:  DATA 75,00
0012A:  DATA 45,6E
0012C:  DATA 74,65
0012E:  DATA 72,20
00130:  DATA 6D,6F
00132:  DATA 6E,74
00134:  DATA 68,20
00136:  DATA 31,2D
00138:  DATA 31,32
0013A:  DATA 00,00
0013C:  DATA 20,4D
0013E:  DATA 6F,6E
00140:  DATA 74,68
00142:  DATA 20,3D
00144:  DATA 2D,3E
00146:  DATA 25,75
00148:  DATA 00,00
0014A:  DATA 45,6E
0014C:  DATA 74,65
0014E:  DATA 72,20
00150:  DATA 44,61
00152:  DATA 74,65
00154:  DATA 20,31
00156:  DATA 2D,33
00158:  DATA 31,00
0015A:  DATA 20,44
0015C:  DATA 61,74
0015E:  DATA 65,20
00160:  DATA 3D,2D
00162:  DATA 3E,25
00164:  DATA 75,00
00166:  DATA 48,6F
00168:  DATA 75,72
0016A:  DATA 73,2D
0016C:  DATA 3E,25
0016E:  DATA 75,00
00170:  DATA 20,4D
00172:  DATA 69,6E
00174:  DATA 2D,3E
00176:  DATA 00,00
00178:  DATA 20,20
0017A:  DATA 57,42
0017C:  DATA 39,49
0017E:  DATA 58,53
00180:  DATA 20,55
00182:  DATA 54,43
00184:  DATA 20,43
00186:  DATA 4C,4F
00188:  DATA 43,4B
0018A:  DATA 20,20
0018C:  DATA 00,00
*
001BE:  TBLRD*+
001C0:  MOVF   FF5,F
001C2:  BZ    01DE
001C4:  MOVFF  FF6,11
001C8:  MOVFF  FF7,12
001CC:  MOVF   FF5,W
001CE:  BTFSS  F9E.4
001D0:  BRA    01CE
001D2:  MOVWF  FAD
001D4:  MOVFF  11,FF6
001D8:  MOVFF  12,FF7
001DC:  BRA    01BE
001DE:  RETURN 0
*
003D6:  MOVF   14,W
003D8:  CLRF   01
003DA:  SUBWF  13,W
003DC:  BC    03E4
003DE:  MOVFF  13,00
003E2:  BRA    03FC
003E4:  CLRF   00
003E6:  MOVLW  08
003E8:  MOVWF  15
003EA:  RLCF   13,F
003EC:  RLCF   00,F
003EE:  MOVF   14,W
003F0:  SUBWF  00,W
003F2:  BTFSC  FD8.0
003F4:  MOVWF  00
003F6:  RLCF   01,F
003F8:  DECFSZ 15,F
003FA:  BRA    03EA
003FC:  RETURN 0
003FE:  MOVF   01,W
00400:  MOVFF  11,13
00404:  MOVLW  64
00406:  MOVWF  14
00408:  RCALL  03D6
0040A:  MOVFF  00,11
0040E:  MOVF   01,W
00410:  MOVLW  30
00412:  BNZ   0422
00414:  BTFSS  12.1
00416:  BRA    0432
00418:  BTFSC  12.3
0041A:  BRA    0432
0041C:  BTFSC  12.4
0041E:  MOVLW  20
00420:  BRA    0428
00422:  BCF    12.3
00424:  BCF    12.4
00426:  BSF    12.0
00428:  ADDWF  01,F
0042A:  MOVF   01,W
0042C:  BTFSS  F9E.4
0042E:  BRA    042C
00430:  MOVWF  FAD
00432:  MOVFF  11,13
00436:  MOVLW  0A
00438:  MOVWF  14
0043A:  RCALL  03D6
0043C:  MOVFF  00,11
00440:  MOVF   01,W
00442:  MOVLW  30
00444:  BNZ   0452
00446:  BTFSC  12.3
00448:  BRA    045C
0044A:  BTFSS  12.0
0044C:  BRA    045C
0044E:  BTFSC  12.4
00450:  MOVLW  20
00452:  ADDWF  01,F
00454:  MOVF   01,W
00456:  BTFSS  F9E.4
00458:  BRA    0456
0045A:  MOVWF  FAD
0045C:  MOVLW  30
0045E:  ADDWF  11,F
00460:  MOVF   11,W
00462:  BTFSS  F9E.4
00464:  BRA    0462
00466:  MOVWF  FAD
00468:  RETURN 0
*
008A6:  TBLRD*+
008A8:  MOVFF  FF6,12
008AC:  MOVFF  FF7,13
008B0:  MOVF   FF5,W
008B2:  BTFSS  F9E.4
008B4:  BRA    08B2
008B6:  MOVWF  FAD
008B8:  MOVFF  12,FF6
008BC:  MOVFF  13,FF7
008C0:  DECFSZ 11,F
008C2:  BRA    08A6
008C4:  RETURN 0
.................... 
.................... #list
.................... 
....................      #fuses NOWDT,NOLVP,XT                   
....................      #use delay(crystal=4mHz) 
*
00196:  CLRF   FEA
00198:  MOVLW  12
0019A:  MOVWF  FE9
0019C:  MOVF   FEF,W
0019E:  BZ    01BC
001A0:  MOVLW  01
001A2:  MOVWF  01
001A4:  CLRF   00
001A6:  DECFSZ 00,F
001A8:  BRA    01A6
001AA:  DECFSZ 01,F
001AC:  BRA    01A4
001AE:  MOVLW  4A
001B0:  MOVWF  00
001B2:  DECFSZ 00,F
001B4:  BRA    01B2
001B6:  BRA    01B8
001B8:  DECFSZ FEF,F
001BA:  BRA    01A0
001BC:  RETURN 0
....................      #use rs232(UART1,baud=9600)     
*
0018E:  BTFSS  F9E.4
00190:  BRA    018E
00192:  MOVWF  FAD
00194:  RETURN 0
....................      #USE I2C(MASTER,I2C1,FORCE_SW,fast=30000)) //100k is max for RTC ds1307
*
0023A:  MOVLW  08
0023C:  MOVWF  01
0023E:  MOVLW  03
00240:  MOVWF  00
00242:  DECFSZ 00,F
00244:  BRA    0242
00246:  BCF    F8B.3
00248:  BCF    F94.3
0024A:  MOVLW  03
0024C:  MOVWF  00
0024E:  DECFSZ 00,F
00250:  BRA    024E
00252:  RLCF   11,F
00254:  BCF    F8B.4
00256:  BTFSC  FD8.0
00258:  BSF    F94.4
0025A:  BTFSS  FD8.0
0025C:  BCF    F94.4
0025E:  BSF    F94.3
00260:  BTFSS  F82.3
00262:  BRA    0260
00264:  DECFSZ 01,F
00266:  BRA    023E
00268:  MOVLW  03
0026A:  MOVWF  00
0026C:  DECFSZ 00,F
0026E:  BRA    026C
00270:  BCF    F8B.3
00272:  BCF    F94.3
00274:  NOP   
00276:  BSF    F94.4
00278:  MOVLW  03
0027A:  MOVWF  00
0027C:  DECFSZ 00,F
0027E:  BRA    027C
00280:  MOVLW  03
00282:  MOVWF  00
00284:  DECFSZ 00,F
00286:  BRA    0284
00288:  BSF    F94.3
0028A:  BTFSS  F82.3
0028C:  BRA    028A
0028E:  CLRF   01
00290:  MOVLW  03
00292:  MOVWF  00
00294:  DECFSZ 00,F
00296:  BRA    0294
00298:  BTFSC  F82.4
0029A:  BSF    01.0
0029C:  BCF    F8B.3
0029E:  BCF    F94.3
002A0:  BCF    F8B.4
002A2:  BCF    F94.4
002A4:  RETURN 0
002A6:  MOVLW  08
002A8:  MOVWF  12
002AA:  MOVFF  00,13
002AE:  BSF    F94.4
002B0:  MOVLW  03
002B2:  MOVWF  00
002B4:  DECFSZ 00,F
002B6:  BRA    02B4
002B8:  BSF    F94.3
002BA:  BTFSS  F82.3
002BC:  BRA    02BA
002BE:  BTFSC  F82.4
002C0:  BSF    FD8.0
002C2:  BTFSS  F82.4
002C4:  BCF    FD8.0
002C6:  RLCF   01,F
002C8:  MOVLW  03
002CA:  MOVWF  00
002CC:  DECFSZ 00,F
002CE:  BRA    02CC
002D0:  BCF    F94.3
002D2:  BCF    F8B.3
002D4:  DECFSZ 12,F
002D6:  BRA    02AE
002D8:  BSF    F94.4
002DA:  MOVLW  03
002DC:  MOVWF  00
002DE:  DECFSZ 00,F
002E0:  BRA    02DE
002E2:  BCF    F8B.4
002E4:  MOVF   13,W
002E6:  BTFSS  FD8.2
002E8:  BCF    F94.4
002EA:  NOP   
002EC:  BSF    F94.3
002EE:  BTFSS  F82.3
002F0:  BRA    02EE
002F2:  MOVLW  03
002F4:  MOVWF  00
002F6:  DECFSZ 00,F
002F8:  BRA    02F6
002FA:  BCF    F8B.3
002FC:  BCF    F94.3
002FE:  MOVLW  03
00300:  MOVWF  00
00302:  DECFSZ 00,F
00304:  BRA    0302
00306:  BCF    F8B.4
00308:  BCF    F94.4
0030A:  RETURN 0
....................      
....................       
....................       
....................       
....................       
.................... 
....................         #include <RTC_DS1307.h>   // driver for the DS1307 RTC
....................    
....................    ///                                                                   /// 
....................    ///                                                                   ///
....................    ///       (0xD0) base address ds1307                                  ///
....................    ///       THIS DRIVER WORKS WITH A DS3231 MODULE ALSO                 ///
....................    ///                                                                   ///
....................    ///                                                                   ///  
....................       
....................               
....................        int8  second, minute, hour, date, month, year, day;
....................        int8  utc_hour;
....................        
....................     void ds1307_display(){
....................      // Convert BCD to decimal
....................         second = (second >> 4) * 10 + (second & 0x0F);
*
0046A:  SWAPF  04,W
0046C:  MOVWF  00
0046E:  MOVLW  0F
00470:  ANDWF  00,F
00472:  MOVF   00,W
00474:  MULLW  0A
00476:  MOVFF  FF3,11
0047A:  MOVF   04,W
0047C:  ANDLW  0F
0047E:  ADDWF  11,W
00480:  MOVWF  04
....................         minute = (minute >> 4) * 10 + (minute & 0x0F);
00482:  SWAPF  05,W
00484:  MOVWF  00
00486:  MOVLW  0F
00488:  ANDWF  00,F
0048A:  MOVF   00,W
0048C:  MULLW  0A
0048E:  MOVFF  FF3,11
00492:  MOVF   05,W
00494:  ANDLW  0F
00496:  ADDWF  11,W
00498:  MOVWF  05
....................         hour =   (hour   >> 4) * 10 + (hour   & 0x0F);
0049A:  SWAPF  06,W
0049C:  MOVWF  00
0049E:  MOVLW  0F
004A0:  ANDWF  00,F
004A2:  MOVF   00,W
004A4:  MULLW  0A
004A6:  MOVFF  FF3,11
004AA:  MOVF   06,W
004AC:  ANDLW  0F
004AE:  ADDWF  11,W
004B0:  MOVWF  06
....................         date =   (date   >> 4) * 10 + (date   & 0x0F);
004B2:  SWAPF  07,W
004B4:  MOVWF  00
004B6:  MOVLW  0F
004B8:  ANDWF  00,F
004BA:  MOVF   00,W
004BC:  MULLW  0A
004BE:  MOVFF  FF3,11
004C2:  MOVF   07,W
004C4:  ANDLW  0F
004C6:  ADDWF  11,W
004C8:  MOVWF  07
....................         month =  (month  >> 4) * 10 + (month  & 0x0F);
004CA:  SWAPF  08,W
004CC:  MOVWF  00
004CE:  MOVLW  0F
004D0:  ANDWF  00,F
004D2:  MOVF   00,W
004D4:  MULLW  0A
004D6:  MOVFF  FF3,11
004DA:  MOVF   08,W
004DC:  ANDLW  0F
004DE:  ADDWF  11,W
004E0:  MOVWF  08
....................         year =   (year   >> 4) * 10 + (year   & 0x0F);
004E2:  SWAPF  09,W
004E4:  MOVWF  00
004E6:  MOVLW  0F
004E8:  ANDWF  00,F
004EA:  MOVF   00,W
004EC:  MULLW  0A
004EE:  MOVFF  FF3,11
004F2:  MOVF   09,W
004F4:  ANDLW  0F
004F6:  ADDWF  11,W
004F8:  MOVWF  09
....................      // End conversion
....................      
....................   // ******************************************************
....................   //   THIS SECTION PRINTS THE UTC TIME                   *
....................   // ******************************************************
....................   
....................  //print UTC hrs
....................              utc_hour = hour +6;                 
004FA:  MOVLW  06
004FC:  ADDWF  06,W
004FE:  MOVWF  0B
....................           if (utc_hour<10){// add leading zero if hours <10   
00500:  MOVF   0B,W
00502:  SUBLW  09
00504:  BNC   052C
....................                 putc (0xfe); 
00506:  MOVLW  FE
00508:  RCALL  018E
....................                 putc (0x45); // cursor psn cmd
0050A:  MOVLW  45
0050C:  RCALL  018E
....................                 putc (0x17); // cursor psn
0050E:  MOVLW  17
00510:  RCALL  018E
....................                 printf("0");
00512:  MOVLW  30
00514:  BTFSS  F9E.4
00516:  BRA    0514
00518:  MOVWF  FAD
....................                 putc (0xfe);  // cursor psn cmd
0051A:  MOVLW  FE
0051C:  RCALL  018E
....................                 putc (0x18);  // put the one's digit of the hours here
0051E:  MOVLW  18
00520:  RCALL  018E
....................                 printf ("%u",utc_hour);
00522:  MOVFF  0B,11
00526:  MOVLW  1B
00528:  MOVWF  12
0052A:  RCALL  03FE
....................              } 
....................           if (utc_hour>9){ // if the hours is >10 then no leading zero's       
0052C:  MOVF   0B,W
0052E:  SUBLW  09
00530:  BC    0548
....................                putc (0xfe); 
00532:  MOVLW  FE
00534:  RCALL  018E
....................                putc (0x45); // cursor psn cmd
00536:  MOVLW  45
00538:  RCALL  018E
....................                putc (0x17);  // cursor psn
0053A:  MOVLW  17
0053C:  RCALL  018E
....................                printf ("%u",utc_hour);
0053E:  MOVFF  0B,11
00542:  MOVLW  1B
00544:  MOVWF  12
00546:  RCALL  03FE
....................              } 
....................      
....................  //print UTC minutes    
....................           if (minute<10){  // add leading zero if hours <10
00548:  MOVF   05,W
0054A:  SUBLW  09
0054C:  BNC   0578
....................              putc (0xfe);  
0054E:  MOVLW  FE
00550:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00552:  MOVLW  45
00554:  RCALL  018E
....................              putc (0x1a);  // cursor psn
00556:  MOVLW  1A
00558:  RCALL  018E
....................              printf("0");             
0055A:  MOVLW  30
0055C:  BTFSS  F9E.4
0055E:  BRA    055C
00560:  MOVWF  FAD
....................              putc (0xfe);   
00562:  MOVLW  FE
00564:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00566:  MOVLW  45
00568:  RCALL  018E
....................              putc (0x1b);  // put the one's digit of the hours here
0056A:  MOVLW  1B
0056C:  RCALL  018E
....................              printf ("%u",minute);
0056E:  MOVFF  05,11
00572:  MOVLW  1B
00574:  MOVWF  12
00576:  RCALL  03FE
....................              } 
....................           if (minute>9){   // if the hours is >10 then no leading zero's
00578:  MOVF   05,W
0057A:  SUBLW  09
0057C:  BC    0594
....................              putc (0xfe);  
0057E:  MOVLW  FE
00580:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00582:  MOVLW  45
00584:  RCALL  018E
....................              putc (0x1a);  // cursor psn
00586:  MOVLW  1A
00588:  RCALL  018E
....................              printf ("%u",minute);
0058A:  MOVFF  05,11
0058E:  MOVLW  1B
00590:  MOVWF  12
00592:  RCALL  03FE
....................              }  
....................         
....................   // ******************************************************
....................   //   THIS SECTION PRINTS THE CURRENT TIME               *
....................   // ******************************************************
....................   
....................  //print CT hrs    
....................           if (hour<10){    // add leading zero if hours <10
00594:  MOVF   06,W
00596:  SUBLW  09
00598:  BNC   05C0
....................              putc (0xFE);  
0059A:  MOVLW  FE
0059C:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
0059E:  MOVLW  45
005A0:  RCALL  018E
....................              putc (0x20);  // cursor psn
005A2:  MOVLW  20
005A4:  RCALL  018E
....................              printf("0");
005A6:  MOVLW  30
005A8:  BTFSS  F9E.4
005AA:  BRA    05A8
005AC:  MOVWF  FAD
....................              putc (0xFE);  // cursor psn
005AE:  MOVLW  FE
005B0:  RCALL  018E
....................              putc (0x23);  // put the one's digit of the hours here
005B2:  MOVLW  23
005B4:  RCALL  018E
....................              printf ("%u",hour);
005B6:  MOVFF  06,11
005BA:  MOVLW  1B
005BC:  MOVWF  12
005BE:  RCALL  03FE
....................              } 
....................           if (hour>9){     // if the hours is >10 then no leading zero's
005C0:  MOVF   06,W
005C2:  SUBLW  09
005C4:  BC    05DC
....................              putc (0xFE);  
005C6:  MOVLW  FE
005C8:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
005CA:  MOVLW  45
005CC:  RCALL  018E
....................              putc (0x20);  // cursor psn
005CE:  MOVLW  20
005D0:  RCALL  018E
....................              printf ("%u",hour);
005D2:  MOVFF  06,11
005D6:  MOVLW  1B
005D8:  MOVWF  12
005DA:  RCALL  03FE
....................              } 
....................       
....................  //print CT minutes    
....................           if (minute<10){  // add leading zero if minutes <10
005DC:  MOVF   05,W
005DE:  SUBLW  09
005E0:  BNC   060C
....................              putc (0xFE);  
005E2:  MOVLW  FE
005E4:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
005E6:  MOVLW  45
005E8:  RCALL  018E
....................              putc (0x23);  // cursor psn
005EA:  MOVLW  23
005EC:  RCALL  018E
....................              printf("0");
005EE:  MOVLW  30
005F0:  BTFSS  F9E.4
005F2:  BRA    05F0
005F4:  MOVWF  FAD
....................              putc (0xFE);  
005F6:  MOVLW  FE
005F8:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
005FA:  MOVLW  45
005FC:  RCALL  018E
....................              putc (0x24);  // put the one's digit of the minutes here
005FE:  MOVLW  24
00600:  RCALL  018E
....................              printf ("%u",minute);
00602:  MOVFF  05,11
00606:  MOVLW  1B
00608:  MOVWF  12
0060A:  RCALL  03FE
....................              } 
....................           if (minute>9){   // if the minutes is >10 then no leading zero's
0060C:  MOVF   05,W
0060E:  SUBLW  09
00610:  BC    0628
....................              putc (0xFE);  
00612:  MOVLW  FE
00614:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00616:  MOVLW  45
00618:  RCALL  018E
....................              putc (0x23);  // cursor psn
0061A:  MOVLW  23
0061C:  RCALL  018E
....................              printf ("%u",minute);
0061E:  MOVFF  05,11
00622:  MOVLW  1B
00624:  MOVWF  12
00626:  RCALL  03FE
....................              }   
.................... 
....................  //print seconds 
....................             
....................           if (second<10){  // add leading zero if seconds <10
00628:  MOVF   04,W
0062A:  SUBLW  09
0062C:  BNC   0658
....................              putc (0xFE);
0062E:  MOVLW  FE
00630:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00632:  MOVLW  45
00634:  RCALL  018E
....................              putc (0x26);  // cursor psn             
00636:  MOVLW  26
00638:  RCALL  018E
....................              printf("0");
0063A:  MOVLW  30
0063C:  BTFSS  F9E.4
0063E:  BRA    063C
00640:  MOVWF  FAD
....................              putc (0xFE);  
00642:  MOVLW  FE
00644:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00646:  MOVLW  45
00648:  RCALL  018E
....................              putc (0x27);  // put the one's digit of the seconds here
0064A:  MOVLW  27
0064C:  RCALL  018E
....................              printf ("%u",second);
0064E:  MOVFF  04,11
00652:  MOVLW  1B
00654:  MOVWF  12
00656:  RCALL  03FE
....................              } 
....................           if (second>9){   // if the seconds is >10 then no leading zero's
00658:  MOVF   04,W
0065A:  SUBLW  09
0065C:  BC    0674
....................              putc (0xFE);  
0065E:  MOVLW  FE
00660:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00662:  MOVLW  45
00664:  RCALL  018E
....................              putc (0x26);  // cursor psn
00666:  MOVLW  26
00668:  RCALL  018E
....................              printf ("%u",second);
0066A:  MOVFF  04,11
0066E:  MOVLW  1B
00670:  MOVWF  12
00672:  RCALL  03FE
....................              } 
.................... 
....................  //print day
....................              putc (0xFE);  
00674:  MOVLW  FE
00676:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
00678:  MOVLW  45
0067A:  RCALL  018E
....................              putc (0x59);  // cursor psn
0067C:  MOVLW  59
0067E:  RCALL  018E
....................              if (day==1){printf ("SUN");}
00680:  DECFSZ 0A,W
00682:  BRA    068E
00684:  MOVLW  04
00686:  MOVWF  FF6
00688:  MOVLW  00
0068A:  MOVWF  FF7
0068C:  RCALL  01BE
....................              if (day==2){printf ("MON");}
0068E:  MOVF   0A,W
00690:  SUBLW  02
00692:  BNZ   069E
00694:  MOVLW  08
00696:  MOVWF  FF6
00698:  MOVLW  00
0069A:  MOVWF  FF7
0069C:  RCALL  01BE
....................              if (day==3){printf ("TUE");}
0069E:  MOVF   0A,W
006A0:  SUBLW  03
006A2:  BNZ   06AE
006A4:  MOVLW  0C
006A6:  MOVWF  FF6
006A8:  MOVLW  00
006AA:  MOVWF  FF7
006AC:  RCALL  01BE
....................              if (day==4){printf ("WED");}
006AE:  MOVF   0A,W
006B0:  SUBLW  04
006B2:  BNZ   06BE
006B4:  MOVLW  10
006B6:  MOVWF  FF6
006B8:  MOVLW  00
006BA:  MOVWF  FF7
006BC:  RCALL  01BE
....................              if (day==5){printf ("THU");}
006BE:  MOVF   0A,W
006C0:  SUBLW  05
006C2:  BNZ   06CE
006C4:  MOVLW  14
006C6:  MOVWF  FF6
006C8:  MOVLW  00
006CA:  MOVWF  FF7
006CC:  RCALL  01BE
....................              if (day==6){printf ("FRI");}
006CE:  MOVF   0A,W
006D0:  SUBLW  06
006D2:  BNZ   06DE
006D4:  MOVLW  18
006D6:  MOVWF  FF6
006D8:  MOVLW  00
006DA:  MOVWF  FF7
006DC:  RCALL  01BE
....................              if (day==7){printf ("SAT");}               
006DE:  MOVF   0A,W
006E0:  SUBLW  07
006E2:  BNZ   06EE
006E4:  MOVLW  1C
006E6:  MOVWF  FF6
006E8:  MOVLW  00
006EA:  MOVWF  FF7
006EC:  RCALL  01BE
....................   //print month
....................              putc (0xFE);  
006EE:  MOVLW  FE
006F0:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
006F2:  MOVLW  45
006F4:  RCALL  018E
....................              putc (0x5D);  // cursor psn            
006F6:  MOVLW  5D
006F8:  RCALL  018E
....................              if (month==1){printf  ("JAN");}
006FA:  DECFSZ 08,W
006FC:  BRA    0708
006FE:  MOVLW  20
00700:  MOVWF  FF6
00702:  MOVLW  00
00704:  MOVWF  FF7
00706:  RCALL  01BE
....................              if (month==2){printf  ("FEB");}
00708:  MOVF   08,W
0070A:  SUBLW  02
0070C:  BNZ   0718
0070E:  MOVLW  24
00710:  MOVWF  FF6
00712:  MOVLW  00
00714:  MOVWF  FF7
00716:  RCALL  01BE
....................              if (month==3){printf  ("MAR");}
00718:  MOVF   08,W
0071A:  SUBLW  03
0071C:  BNZ   0728
0071E:  MOVLW  28
00720:  MOVWF  FF6
00722:  MOVLW  00
00724:  MOVWF  FF7
00726:  RCALL  01BE
....................              if (month==4){printf  ("APR");}
00728:  MOVF   08,W
0072A:  SUBLW  04
0072C:  BNZ   0738
0072E:  MOVLW  2C
00730:  MOVWF  FF6
00732:  MOVLW  00
00734:  MOVWF  FF7
00736:  RCALL  01BE
....................              if (month==5){printf  ("MAY");}
00738:  MOVF   08,W
0073A:  SUBLW  05
0073C:  BNZ   0748
0073E:  MOVLW  30
00740:  MOVWF  FF6
00742:  MOVLW  00
00744:  MOVWF  FF7
00746:  RCALL  01BE
....................              if (month==6){printf  ("JUN");}
00748:  MOVF   08,W
0074A:  SUBLW  06
0074C:  BNZ   0758
0074E:  MOVLW  34
00750:  MOVWF  FF6
00752:  MOVLW  00
00754:  MOVWF  FF7
00756:  RCALL  01BE
....................              if (month==7){printf  ("JUL");} 
00758:  MOVF   08,W
0075A:  SUBLW  07
0075C:  BNZ   0768
0075E:  MOVLW  38
00760:  MOVWF  FF6
00762:  MOVLW  00
00764:  MOVWF  FF7
00766:  RCALL  01BE
....................              if (month==8){printf  ("AUG");}
00768:  MOVF   08,W
0076A:  SUBLW  08
0076C:  BNZ   0778
0076E:  MOVLW  3C
00770:  MOVWF  FF6
00772:  MOVLW  00
00774:  MOVWF  FF7
00776:  RCALL  01BE
....................              if (month==9){printf  ("SEP");}
00778:  MOVF   08,W
0077A:  SUBLW  09
0077C:  BNZ   0788
0077E:  MOVLW  40
00780:  MOVWF  FF6
00782:  MOVLW  00
00784:  MOVWF  FF7
00786:  RCALL  01BE
....................              if (month==10){printf ("OCT");}
00788:  MOVF   08,W
0078A:  SUBLW  0A
0078C:  BNZ   0798
0078E:  MOVLW  44
00790:  MOVWF  FF6
00792:  MOVLW  00
00794:  MOVWF  FF7
00796:  RCALL  01BE
....................              if (month==11){printf ("NOV");}
00798:  MOVF   08,W
0079A:  SUBLW  0B
0079C:  BNZ   07A8
0079E:  MOVLW  48
007A0:  MOVWF  FF6
007A2:  MOVLW  00
007A4:  MOVWF  FF7
007A6:  RCALL  01BE
....................              if (month==12){printf ("DEC");}             
007A8:  MOVF   08,W
007AA:  SUBLW  0C
007AC:  BNZ   07B8
007AE:  MOVLW  4C
007B0:  MOVWF  FF6
007B2:  MOVLW  00
007B4:  MOVWF  FF7
007B6:  RCALL  01BE
....................   //print date            
....................              putc (0xFE);  
007B8:  MOVLW  FE
007BA:  RCALL  018E
....................              putc (0x45);  // cursor psn cmd
007BC:  MOVLW  45
007BE:  RCALL  018E
....................              putc (0x60);  // cursor            
007C0:  MOVLW  60
007C2:  RCALL  018E
....................              printf (" %u",date);
007C4:  MOVLW  20
007C6:  BTFSS  F9E.4
007C8:  BRA    07C6
007CA:  MOVWF  FAD
007CC:  MOVFF  07,11
007D0:  MOVLW  1B
007D2:  MOVWF  12
007D4:  RCALL  03FE
007D6:  GOTO   089C (RETURN)
....................              
....................        } //END ds1307_display  
....................      
....................     
....................     void write_Seconds()
....................       {
....................        i2c_start();
*
00986:  BSF    F94.4
00988:  MOVLW  03
0098A:  MOVWF  00
0098C:  DECFSZ 00,F
0098E:  BRA    098C
00990:  BSF    F94.3
00992:  MOVLW  03
00994:  MOVWF  00
00996:  DECFSZ 00,F
00998:  BRA    0996
0099A:  BCF    F8B.4
0099C:  BCF    F94.4
0099E:  MOVLW  03
009A0:  MOVWF  00
009A2:  DECFSZ 00,F
009A4:  BRA    09A2
009A6:  BCF    F8B.3
009A8:  BCF    F94.3
....................        i2c_write(0xD0); //base address ds1307
009AA:  MOVLW  D0
009AC:  MOVWF  11
009AE:  RCALL  023A
....................        i2c_write(0);    //seconds address
009B0:  CLRF   11
009B2:  RCALL  023A
....................        i2c_write(0x00);  //seconds are set to zero (00)
009B4:  CLRF   11
009B6:  RCALL  023A
....................        i2c_stop();  
009B8:  BCF    F94.4
009BA:  NOP   
009BC:  BSF    F94.3
009BE:  BTFSS  F82.3
009C0:  BRA    09BE
009C2:  MOVLW  03
009C4:  MOVWF  00
009C6:  DECFSZ 00,F
009C8:  BRA    09C6
009CA:  BRA    09CC
009CC:  NOP   
009CE:  BSF    F94.4
009D0:  MOVLW  03
009D2:  MOVWF  00
009D4:  DECFSZ 00,F
009D6:  BRA    09D4
....................        delay_ms(10);
009D8:  MOVLW  0A
009DA:  MOVWF  12
009DC:  CALL   0196
009E0:  GOTO   0D2A (RETURN)
....................       }
....................      
....................     void Write_Minutes()
....................       {
....................        i2c_start();
*
00926:  BSF    F94.4
00928:  MOVLW  03
0092A:  MOVWF  00
0092C:  DECFSZ 00,F
0092E:  BRA    092C
00930:  BSF    F94.3
00932:  MOVLW  03
00934:  MOVWF  00
00936:  DECFSZ 00,F
00938:  BRA    0936
0093A:  BCF    F8B.4
0093C:  BCF    F94.4
0093E:  MOVLW  03
00940:  MOVWF  00
00942:  DECFSZ 00,F
00944:  BRA    0942
00946:  BCF    F8B.3
00948:  BCF    F94.3
....................        i2c_write(0xD0);   //base address ds1307
0094A:  MOVLW  D0
0094C:  MOVWF  11
0094E:  RCALL  023A
....................        i2c_write(0x01);   //minutes reg address
00950:  MOVLW  01
00952:  MOVWF  11
00954:  RCALL  023A
....................        i2c_write(minute); //set minutes reg to this value
00956:  MOVFF  05,11
0095A:  RCALL  023A
....................        i2c_stop();
0095C:  BCF    F94.4
0095E:  NOP   
00960:  BSF    F94.3
00962:  BTFSS  F82.3
00964:  BRA    0962
00966:  MOVLW  03
00968:  MOVWF  00
0096A:  DECFSZ 00,F
0096C:  BRA    096A
0096E:  BRA    0970
00970:  NOP   
00972:  BSF    F94.4
00974:  MOVLW  03
00976:  MOVWF  00
00978:  DECFSZ 00,F
0097A:  BRA    0978
....................        delay_ms(10);
0097C:  MOVLW  0A
0097E:  MOVWF  12
00980:  RCALL  0196
....................        break;
00982:  GOTO   0D28 (RETURN)
....................       }
....................      
....................     void Write_Hours()
....................       {
....................        i2c_start();
*
008C6:  BSF    F94.4
008C8:  MOVLW  03
008CA:  MOVWF  00
008CC:  DECFSZ 00,F
008CE:  BRA    08CC
008D0:  BSF    F94.3
008D2:  MOVLW  03
008D4:  MOVWF  00
008D6:  DECFSZ 00,F
008D8:  BRA    08D6
008DA:  BCF    F8B.4
008DC:  BCF    F94.4
008DE:  MOVLW  03
008E0:  MOVWF  00
008E2:  DECFSZ 00,F
008E4:  BRA    08E2
008E6:  BCF    F8B.3
008E8:  BCF    F94.3
....................        i2c_write(0xD0); //base address ds1307
008EA:  MOVLW  D0
008EC:  MOVWF  11
008EE:  RCALL  023A
....................        i2c_write(0x02); //hours reg address
008F0:  MOVLW  02
008F2:  MOVWF  11
008F4:  RCALL  023A
....................        i2c_write(hour); //set hours to this value
008F6:  MOVFF  06,11
008FA:  RCALL  023A
....................        i2c_stop();
008FC:  BCF    F94.4
008FE:  NOP   
00900:  BSF    F94.3
00902:  BTFSS  F82.3
00904:  BRA    0902
00906:  MOVLW  03
00908:  MOVWF  00
0090A:  DECFSZ 00,F
0090C:  BRA    090A
0090E:  BRA    0910
00910:  NOP   
00912:  BSF    F94.4
00914:  MOVLW  03
00916:  MOVWF  00
00918:  DECFSZ 00,F
0091A:  BRA    0918
....................        delay_ms(10);
0091C:  MOVLW  0A
0091E:  MOVWF  12
00920:  RCALL  0196
....................        break;
00922:  GOTO   0C3A (RETURN)
....................       }
....................        
....................     void Write_Days()
....................       {
....................        i2c_start();
*
009E4:  BSF    F94.4
009E6:  MOVLW  03
009E8:  MOVWF  00
009EA:  DECFSZ 00,F
009EC:  BRA    09EA
009EE:  BSF    F94.3
009F0:  MOVLW  03
009F2:  MOVWF  00
009F4:  DECFSZ 00,F
009F6:  BRA    09F4
009F8:  BCF    F8B.4
009FA:  BCF    F94.4
009FC:  MOVLW  03
009FE:  MOVWF  00
00A00:  DECFSZ 00,F
00A02:  BRA    0A00
00A04:  BCF    F8B.3
00A06:  BCF    F94.3
....................        i2c_write(0xD0); //base address ds1307
00A08:  MOVLW  D0
00A0A:  MOVWF  11
00A0C:  RCALL  023A
....................        i2c_write(0x03); //days reg address
00A0E:  MOVLW  03
00A10:  MOVWF  11
00A12:  RCALL  023A
....................        i2c_write(day);  //set days reg to this value
00A14:  MOVFF  0A,11
00A18:  RCALL  023A
....................        i2c_stop(); 
00A1A:  BCF    F94.4
00A1C:  NOP   
00A1E:  BSF    F94.3
00A20:  BTFSS  F82.3
00A22:  BRA    0A20
00A24:  MOVLW  03
00A26:  MOVWF  00
00A28:  DECFSZ 00,F
00A2A:  BRA    0A28
00A2C:  BRA    0A2E
00A2E:  NOP   
00A30:  BSF    F94.4
00A32:  MOVLW  03
00A34:  MOVWF  00
00A36:  DECFSZ 00,F
00A38:  BRA    0A36
....................        delay_ms(10);
00A3A:  MOVLW  0A
00A3C:  MOVWF  12
00A3E:  CALL   0196
....................        break;
00A42:  GOTO   0E24 (RETURN)
....................       }
.................... 
....................     void Write_Date()
....................       {
....................        i2c_start();
*
00AAE:  BSF    F94.4
00AB0:  MOVLW  03
00AB2:  MOVWF  00
00AB4:  DECFSZ 00,F
00AB6:  BRA    0AB4
00AB8:  BSF    F94.3
00ABA:  MOVLW  03
00ABC:  MOVWF  00
00ABE:  DECFSZ 00,F
00AC0:  BRA    0ABE
00AC2:  BCF    F8B.4
00AC4:  BCF    F94.4
00AC6:  MOVLW  03
00AC8:  MOVWF  00
00ACA:  DECFSZ 00,F
00ACC:  BRA    0ACA
00ACE:  BCF    F8B.3
00AD0:  BCF    F94.3
....................        i2c_write(0xD0); //base address ds1307
00AD2:  MOVLW  D0
00AD4:  MOVWF  11
00AD6:  CALL   023A
....................        i2c_write(0x04); //date reg address
00ADA:  MOVLW  04
00ADC:  MOVWF  11
00ADE:  CALL   023A
....................        i2c_write(date); //set date reg to this value
00AE2:  MOVFF  07,11
00AE6:  CALL   023A
....................        i2c_stop(); 
00AEA:  BCF    F94.4
00AEC:  NOP   
00AEE:  BSF    F94.3
00AF0:  BTFSS  F82.3
00AF2:  BRA    0AF0
00AF4:  MOVLW  03
00AF6:  MOVWF  00
00AF8:  DECFSZ 00,F
00AFA:  BRA    0AF8
00AFC:  BRA    0AFE
00AFE:  NOP   
00B00:  BSF    F94.4
00B02:  MOVLW  03
00B04:  MOVWF  00
00B06:  DECFSZ 00,F
00B08:  BRA    0B06
....................        delay_ms(10);
00B0A:  MOVLW  0A
00B0C:  MOVWF  12
00B0E:  CALL   0196
....................        break;
00B12:  GOTO   0FD4 (RETURN)
....................       }
.................... 
....................     void Write_Months()
....................       {
....................        i2c_start();
*
00A46:  BSF    F94.4
00A48:  MOVLW  03
00A4A:  MOVWF  00
00A4C:  DECFSZ 00,F
00A4E:  BRA    0A4C
00A50:  BSF    F94.3
00A52:  MOVLW  03
00A54:  MOVWF  00
00A56:  DECFSZ 00,F
00A58:  BRA    0A56
00A5A:  BCF    F8B.4
00A5C:  BCF    F94.4
00A5E:  MOVLW  03
00A60:  MOVWF  00
00A62:  DECFSZ 00,F
00A64:  BRA    0A62
00A66:  BCF    F8B.3
00A68:  BCF    F94.3
....................        i2c_write(0xD0); //base address ds1307
00A6A:  MOVLW  D0
00A6C:  MOVWF  11
00A6E:  CALL   023A
....................        i2c_write(0x05); //months reg address
00A72:  MOVLW  05
00A74:  MOVWF  11
00A76:  CALL   023A
....................        i2c_write(month);//set months reg to this value
00A7A:  MOVFF  08,11
00A7E:  CALL   023A
....................        i2c_stop(); 
00A82:  BCF    F94.4
00A84:  NOP   
00A86:  BSF    F94.3
00A88:  BTFSS  F82.3
00A8A:  BRA    0A88
00A8C:  MOVLW  03
00A8E:  MOVWF  00
00A90:  DECFSZ 00,F
00A92:  BRA    0A90
00A94:  BRA    0A96
00A96:  NOP   
00A98:  BSF    F94.4
00A9A:  MOVLW  03
00A9C:  MOVWF  00
00A9E:  DECFSZ 00,F
00AA0:  BRA    0A9E
....................        delay_ms(10);
00AA2:  MOVLW  0A
00AA4:  MOVWF  12
00AA6:  CALL   0196
....................        break;
00AAA:  GOTO   0F00 (RETURN)
....................       }
....................   
....................     void Write_Years()
....................       {
....................        i2c_start();
....................        i2c_write(0xD0); //base address ds1307
....................        i2c_write(0x06); //year reg address
....................        i2c_write(year); //set year reg to this value
....................        i2c_stop();
....................        delay_ms(10);
....................       }
....................   
....................     void Read_All_RTC_Regs() 
....................       { 
....................        i2c_start();                  // Start I2C protocol
*
007DA:  BSF    F94.4
007DC:  MOVLW  03
007DE:  MOVWF  00
007E0:  DECFSZ 00,F
007E2:  BRA    07E0
007E4:  BSF    F94.3
007E6:  MOVLW  03
007E8:  MOVWF  00
007EA:  DECFSZ 00,F
007EC:  BRA    07EA
007EE:  BCF    F8B.4
007F0:  BCF    F94.4
007F2:  MOVLW  03
007F4:  MOVWF  00
007F6:  DECFSZ 00,F
007F8:  BRA    07F6
007FA:  BCF    F8B.3
007FC:  BCF    F94.3
....................        i2c_write(0xD0);              // DS1307 address
007FE:  MOVLW  D0
00800:  MOVWF  11
00802:  RCALL  023A
....................        i2c_write(0);                 // Send register address
00804:  CLRF   11
00806:  RCALL  023A
....................        i2c_start();                  // Restart I2C
00808:  BSF    F94.4
0080A:  MOVLW  03
0080C:  MOVWF  00
0080E:  DECFSZ 00,F
00810:  BRA    080E
00812:  BSF    F94.3
00814:  MOVLW  03
00816:  MOVWF  00
00818:  DECFSZ 00,F
0081A:  BRA    0818
0081C:  BTFSS  F82.3
0081E:  BRA    081C
00820:  BCF    F8B.4
00822:  BCF    F94.4
00824:  MOVLW  03
00826:  MOVWF  00
00828:  DECFSZ 00,F
0082A:  BRA    0828
0082C:  BCF    F8B.3
0082E:  BCF    F94.3
....................        i2c_write(0xD1);              // Initialize data read
00830:  MOVLW  D1
00832:  MOVWF  11
00834:  RCALL  023A
....................        second = i2c_read(1);         // Read seconds from register 0
00836:  MOVLW  01
00838:  MOVWF  00
0083A:  RCALL  02A6
0083C:  MOVFF  01,04
....................        minute = i2c_read(1);         // Read minutes from register 1
00840:  MOVLW  01
00842:  MOVWF  00
00844:  RCALL  02A6
00846:  MOVFF  01,05
....................        hour   = i2c_read(1);         // Read hour from register 2
0084A:  MOVLW  01
0084C:  MOVWF  00
0084E:  RCALL  02A6
00850:  MOVFF  01,06
....................        day    = i2c_read(1);         // Read day from register 3
00854:  MOVLW  01
00856:  MOVWF  00
00858:  RCALL  02A6
0085A:  MOVFF  01,0A
....................        date   = i2c_read(1);         // Read date from register 4
0085E:  MOVLW  01
00860:  MOVWF  00
00862:  RCALL  02A6
00864:  MOVFF  01,07
....................        month  = i2c_read(1);         // Read month from register 5
00868:  MOVLW  01
0086A:  MOVWF  00
0086C:  RCALL  02A6
0086E:  MOVFF  01,08
....................        year   = i2c_read(0);         // Read year from register 6
00872:  CLRF   00
00874:  RCALL  02A6
00876:  MOVFF  01,09
....................        i2c_stop();                   // Stop I2C protocol
0087A:  BCF    F94.4
0087C:  NOP   
0087E:  BSF    F94.3
00880:  BTFSS  F82.3
00882:  BRA    0880
00884:  MOVLW  03
00886:  MOVWF  00
00888:  DECFSZ 00,F
0088A:  BRA    0888
0088C:  BRA    088E
0088E:  NOP   
00890:  BSF    F94.4
00892:  MOVLW  03
00894:  MOVWF  00
00896:  DECFSZ 00,F
00898:  BRA    0896
....................        ds1307_display();             // Display time & calendar
0089A:  BRA    046A
....................        delay_ms(100);                // This delay stops the LCD fom flashing
0089C:  MOVLW  64
0089E:  MOVWF  12
008A0:  RCALL  0196
008A2:  GOTO   1090 (RETURN)
....................       }//end read_All_RTC_Regs       
....................       
....................     void Read_All_RTC_Regs_At_Start() //read all ds1307 regs without display
....................       { 
....................        i2c_start();                  // Start I2C protocol
*
0030C:  BSF    F94.4
0030E:  MOVLW  03
00310:  MOVWF  00
00312:  DECFSZ 00,F
00314:  BRA    0312
00316:  BSF    F94.3
00318:  MOVLW  03
0031A:  MOVWF  00
0031C:  DECFSZ 00,F
0031E:  BRA    031C
00320:  BCF    F8B.4
00322:  BCF    F94.4
00324:  MOVLW  03
00326:  MOVWF  00
00328:  DECFSZ 00,F
0032A:  BRA    0328
0032C:  BCF    F8B.3
0032E:  BCF    F94.3
....................        i2c_write(0xD0);              // DS1307 address
00330:  MOVLW  D0
00332:  MOVWF  11
00334:  RCALL  023A
....................        i2c_write(0);                 // Send register address
00336:  CLRF   11
00338:  RCALL  023A
....................        i2c_start();                  // Restart I2C
0033A:  BSF    F94.4
0033C:  MOVLW  03
0033E:  MOVWF  00
00340:  DECFSZ 00,F
00342:  BRA    0340
00344:  BSF    F94.3
00346:  MOVLW  03
00348:  MOVWF  00
0034A:  DECFSZ 00,F
0034C:  BRA    034A
0034E:  BTFSS  F82.3
00350:  BRA    034E
00352:  BCF    F8B.4
00354:  BCF    F94.4
00356:  MOVLW  03
00358:  MOVWF  00
0035A:  DECFSZ 00,F
0035C:  BRA    035A
0035E:  BCF    F8B.3
00360:  BCF    F94.3
....................        i2c_write(0xD1);              // Initialize data read
00362:  MOVLW  D1
00364:  MOVWF  11
00366:  RCALL  023A
....................        second = i2c_read(1);         // Read seconds from register 0
00368:  MOVLW  01
0036A:  MOVWF  00
0036C:  RCALL  02A6
0036E:  MOVFF  01,04
....................        minute = i2c_read(1);         // Read minuts from register 1
00372:  MOVLW  01
00374:  MOVWF  00
00376:  RCALL  02A6
00378:  MOVFF  01,05
....................        hour   = i2c_read(1);         // Read hour from register 2
0037C:  MOVLW  01
0037E:  MOVWF  00
00380:  RCALL  02A6
00382:  MOVFF  01,06
....................        day    = i2c_read(1);         // Read day from register 3
00386:  MOVLW  01
00388:  MOVWF  00
0038A:  RCALL  02A6
0038C:  MOVFF  01,0A
....................        date   = i2c_read(1);         // Read date from register 4
00390:  MOVLW  01
00392:  MOVWF  00
00394:  RCALL  02A6
00396:  MOVFF  01,07
....................        month  = i2c_read(1);         // Read month from register 5
0039A:  MOVLW  01
0039C:  MOVWF  00
0039E:  RCALL  02A6
003A0:  MOVFF  01,08
....................        year   = i2c_read(0);         // Read year from register 6
003A4:  CLRF   00
003A6:  RCALL  02A6
003A8:  MOVFF  01,09
....................        i2c_stop(); // Stop I2C protocol
003AC:  BCF    F94.4
003AE:  NOP   
003B0:  BSF    F94.3
003B2:  BTFSS  F82.3
003B4:  BRA    03B2
003B6:  MOVLW  03
003B8:  MOVWF  00
003BA:  DECFSZ 00,F
003BC:  BRA    03BA
003BE:  BRA    03C0
003C0:  NOP   
003C2:  BSF    F94.4
003C4:  MOVLW  03
003C6:  MOVWF  00
003C8:  DECFSZ 00,F
003CA:  BRA    03C8
....................        delay_ms(10);                // This delay stops the LCD fom flashing
003CC:  MOVLW  0A
003CE:  MOVWF  12
003D0:  RCALL  0196
003D2:  GOTO   108C (RETURN)
....................       }//end read_All_RTC_Regs_At_Start    
....................       
....................   
.................... 
....................         #include <manual_set_time.h>
.................... 
....................     
....................       
.................... 
....................    
....................    /// This file is used to read the thumbwheel switch and 3 push buttons  /// 
....................    /// Start PB Increment PB Save PB                                       ///
....................    /// The seconds are zeroed when the minutes are entered                 ///
....................    ///                                                                     ///
....................    /// All the inputs are pulled up high so all the true input data is     ///
....................    /// tested as Low = true. Only the first 3 bits of the thumbwheel       ///
....................    /// switch are being used that allows for 8 different selections only   ///
....................    /// 5 are being used hours, minutes, day, month, and date               ///
....................    
....................   
....................    /// The day-of-week register in the DS1307 counts from 1 through 7      /// 
....................    /// It doesn't know anything about Sunday, Monday, etc.  It's just a    ///
....................    /// counter that is incremented every day at midnight.                  ///
....................    /// If you want the first day of the week to be Sunday and today is     ///
....................    /// Sunday set the day-of-week to the value 1.  If today is Monday set  ///
....................    /// the day-of-week to the value 2, etc.Then every time you read the    ///
....................    /// day of week from the DS1307 1 ==> Sunday 2 ==> Monday etc           ///
....................    ///                                                                     ///
....................    
....................    
....................     
....................       #define PB_increment pin_B4
....................       #define PB_Save_Time pin_B5
....................       
....................      
....................       int loop5 = 0;
....................       int value;
....................       int temp =0;
....................       
....................     void Template()
....................        {                                     
....................                 putc (0xfe); 
*
001E0:  MOVLW  FE
001E2:  RCALL  018E
....................                 putc (0x45); // psn cmd
001E4:  MOVLW  45
001E6:  RCALL  018E
....................                 putc (0x05); // psn                
001E8:  MOVLW  05
001EA:  RCALL  018E
....................                 printf ("WB9IXS UTC");                
001EC:  MOVLW  50
001EE:  MOVWF  FF6
001F0:  MOVLW  00
001F2:  MOVWF  FF7
001F4:  RCALL  01BE
....................                 putc (0xfe); 
001F6:  MOVLW  FE
001F8:  RCALL  018E
....................                 putc (0x45); // psn cmd
001FA:  MOVLW  45
001FC:  RCALL  018E
....................                 putc (0x47); // psn 
001FE:  MOVLW  47
00200:  RCALL  018E
....................                 printf ("CLOCK");                 
00202:  MOVLW  5C
00204:  MOVWF  FF6
00206:  MOVLW  00
00208:  MOVWF  FF7
0020A:  RCALL  01BE
....................                 putc (0xfe); 
0020C:  MOVLW  FE
0020E:  RCALL  018E
....................                 putc (0x45); // psn cmd
00210:  MOVLW  45
00212:  RCALL  018E
....................                 putc (0x14); //row1 
00214:  MOVLW  14
00216:  RCALL  018E
....................                 printf ("UT   :  ");                
00218:  MOVLW  62
0021A:  MOVWF  FF6
0021C:  MOVLW  00
0021E:  MOVWF  FF7
00220:  RCALL  01BE
....................                 putc (0xfe); 
00222:  MOVLW  FE
00224:  RCALL  018E
....................                 putc (0x45); // psn cmd
00226:  MOVLW  45
00228:  RCALL  018E
....................                 putc (0x1d); //row1 
0022A:  MOVLW  1D
0022C:  RCALL  018E
....................                 printf ("CT   :  :  ");
0022E:  MOVLW  6C
00230:  MOVWF  FF6
00232:  MOVLW  00
00234:  MOVWF  FF7
00236:  RCALL  01BE
00238:  RETURN 0
....................                }    
....................              
....................     void Manual_Set_Time() {
....................                 loop5 = 1; 
*
00B16:  MOVLW  01
00B18:  MOVWF  0E
....................                 value = input_b() & 0x07; // only read 1st 3 bits
00B1A:  SETF   F93
00B1C:  MOVF   F81,W
00B1E:  ANDLW  07
00B20:  MOVWF  0F
....................                 delay_ms(500);                                                  
00B22:  MOVLW  02
00B24:  MOVWF  11
00B26:  MOVLW  FA
00B28:  MOVWF  12
00B2A:  CALL   0196
00B2E:  DECFSZ 11,F
00B30:  BRA    0B26
....................     /* Value is the value read from the 1st 3 bits on the thumbwheel switch */
....................     /* Because the inputs are pulled high the values are inverted. for example*/
....................     /* PSN 0 has no contacts pulled low so the value is 0x07 PSN 1 has bit 0 */
....................     /* low so the value is 0x06 psn 2 has bit 2 low so the value is 0x05 and */
....................     /* so on                                                                 */
....................     
....................     
....................          switch(value ) {            
00B32:  MOVF   0F,W
00B34:  XORLW  07
00B36:  BZ    0B52
00B38:  XORLW  01
00B3A:  BTFSC  FD8.2
00B3C:  BRA    0C5A
00B3E:  XORLW  03
00B40:  BTFSC  FD8.2
00B42:  BRA    0D4A
00B44:  XORLW  01
00B46:  BTFSC  FD8.2
00B48:  BRA    0E44
00B4A:  XORLW  07
00B4C:  BTFSC  FD8.2
00B4E:  BRA    0F20
00B50:  BRA    0FF4
....................             case 7: //hour
....................                   temp=1;
00B52:  MOVLW  01
00B54:  MOVWF  10
....................                   putc (0xfe);
00B56:  MOVLW  FE
00B58:  CALL   018E
....................                   putc (0x51); // clear the screen
00B5C:  MOVLW  51
00B5E:  CALL   018E
....................                while(loop5){
00B62:  MOVF   0E,F
00B64:  BTFSC  FD8.2
00B66:  BRA    0C5A
....................                  putc (0xFE);
00B68:  MOVLW  FE
00B6A:  CALL   018E
....................                  putc (0x45);  // cursor psn cmd
00B6E:  MOVLW  45
00B70:  CALL   018E
....................                  putc (0x00);  // cursor psn 
00B74:  MOVLW  00
00B76:  CALL   018E
....................                  printf("Hrs are 24hr format");
00B7A:  MOVLW  78
00B7C:  MOVWF  FF6
00B7E:  MOVLW  00
00B80:  MOVWF  FF7
00B82:  CALL   01BE
....................                  putc (0xFE);
00B86:  MOVLW  FE
00B88:  CALL   018E
....................                  putc (0x45);  // cursor psn cmd
00B8C:  MOVLW  45
00B8E:  CALL   018E
....................                  putc (0x40);  // cursor psn 
00B92:  MOVLW  40
00B94:  CALL   018E
....................                  printf("Hrs are CT time UTC");
00B98:  MOVLW  8C
00B9A:  MOVWF  FF6
00B9C:  MOVLW  00
00B9E:  MOVWF  FF7
00BA0:  CALL   01BE
....................                  putc (0xFE);
00BA4:  MOVLW  FE
00BA6:  CALL   018E
....................                  putc (0x45);  // cursor psn cmd
00BAA:  MOVLW  45
00BAC:  CALL   018E
....................                  putc (0x14);  // cursor psn 
00BB0:  MOVLW  14
00BB2:  CALL   018E
....................                  printf("time is automatic");
00BB6:  MOVLW  A0
00BB8:  MOVWF  FF6
00BBA:  MOVLW  00
00BBC:  MOVWF  FF7
00BBE:  CALL   01BE
....................          // print the hours as they increment    
....................                 putc (0xFE);
00BC2:  MOVLW  FE
00BC4:  CALL   018E
....................                 putc (0x45);  // cursor psn cmd
00BC8:  MOVLW  45
00BCA:  CALL   018E
....................                 putc (0x54);  // cursor psn       
00BCE:  MOVLW  54
00BD0:  CALL   018E
....................                 printf (" Hours =-> %u",temp);
00BD4:  MOVLW  B2
00BD6:  MOVWF  FF6
00BD8:  MOVLW  00
00BDA:  MOVWF  FF7
00BDC:  MOVLW  0B
00BDE:  MOVWF  11
00BE0:  RCALL  08A6
00BE2:  MOVFF  10,11
00BE6:  MOVLW  1B
00BE8:  MOVWF  12
00BEA:  RCALL  03FE
....................                 delay_ms(100);
00BEC:  MOVLW  64
00BEE:  MOVWF  12
00BF0:  CALL   0196
....................                   
....................                   if(!input(PB_increment)){temp ++;delay_ms(200);}
00BF4:  BSF    F93.4
00BF6:  BTFSC  F81.4
00BF8:  BRA    0C04
00BFA:  INCF   10,F
00BFC:  MOVLW  C8
00BFE:  MOVWF  12
00C00:  CALL   0196
....................                      if (temp > 24){temp = 0;}
00C04:  MOVF   10,W
00C06:  SUBLW  18
00C08:  BC    0C0C
00C0A:  CLRF   10
....................                         if(!input(PB_Save_Time)){
00C0C:  BSF    F93.5
00C0E:  BTFSC  F81.5
00C10:  BRA    0C58
....................                         hour = (((temp/10) << 4) | (temp % 10));
00C12:  MOVFF  10,13
00C16:  MOVLW  0A
00C18:  MOVWF  14
00C1A:  CALL   03D6
00C1E:  SWAPF  01,W
00C20:  MOVWF  11
00C22:  MOVLW  F0
00C24:  ANDWF  11,F
00C26:  MOVFF  10,13
00C2A:  MOVLW  0A
00C2C:  MOVWF  14
00C2E:  CALL   03D6
00C32:  MOVF   00,W
00C34:  IORWF  11,W
00C36:  MOVWF  06
....................                         //(((temp/10) << 4) | (temp % 10)); convert temp to BCD
....................                         Write_hours();
00C38:  BRA    08C6
....................                         loop5 = 0;
00C3A:  CLRF   0E
....................                         temp=0;
00C3C:  CLRF   10
....................                   // clear the area where the hours were setup 
....................                         putc (0xfe);
00C3E:  MOVLW  FE
00C40:  CALL   018E
....................                         putc (0x51); // clear the screen
00C44:  MOVLW  51
00C46:  CALL   018E
....................                         delay_ms(200);
00C4A:  MOVLW  C8
00C4C:  MOVWF  12
00C4E:  CALL   0196
....................                         Template();
00C52:  CALL   01E0
....................                         return;
00C56:  BRA    0FF8
....................                         }//end if 
00C58:  BRA    0B62
....................                          }//end while  
....................             
....................             case 6:   //minute
....................                   putc (0xfe);
00C5A:  MOVLW  FE
00C5C:  CALL   018E
....................                   putc (0x51); // clear the screen
00C60:  MOVLW  51
00C62:  CALL   018E
....................                while(loop5){
00C66:  MOVF   0E,F
00C68:  BZ    0D4A
....................                   putc (0xFE);
00C6A:  MOVLW  FE
00C6C:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00C70:  MOVLW  45
00C72:  CALL   018E
....................                   putc (0x00);  // cursor psn 
00C76:  MOVLW  00
00C78:  CALL   018E
....................                   printf("Sec's are set to 0 ");
00C7C:  MOVLW  C0
00C7E:  MOVWF  FF6
00C80:  MOVLW  00
00C82:  MOVWF  FF7
00C84:  CALL   01BE
....................                   putc (0xFE);
00C88:  MOVLW  FE
00C8A:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00C8E:  MOVLW  45
00C90:  CALL   018E
....................                   putc (0x40);  // cursor psn 
00C94:  MOVLW  40
00C96:  CALL   018E
....................                   printf("when min's are saved");
00C9A:  MOVLW  D4
00C9C:  MOVWF  FF6
00C9E:  MOVLW  00
00CA0:  MOVWF  FF7
00CA2:  CALL   01BE
....................                   delay_ms(100);
00CA6:  MOVLW  64
00CA8:  MOVWF  12
00CAA:  CALL   0196
....................             // print the minutes as they increment 
....................                   putc (0xFE);
00CAE:  MOVLW  FE
00CB0:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00CB4:  MOVLW  45
00CB6:  CALL   018E
....................                   putc (0x54);  // cursor psn   
00CBA:  MOVLW  54
00CBC:  CALL   018E
....................                   printf (" Minutes =-> %u",temp);
00CC0:  MOVLW  EA
00CC2:  MOVWF  FF6
00CC4:  MOVLW  00
00CC6:  MOVWF  FF7
00CC8:  MOVLW  0D
00CCA:  MOVWF  11
00CCC:  RCALL  08A6
00CCE:  MOVFF  10,11
00CD2:  MOVLW  1B
00CD4:  MOVWF  12
00CD6:  CALL   03FE
....................                   delay_ms(100);
00CDA:  MOVLW  64
00CDC:  MOVWF  12
00CDE:  CALL   0196
....................                  
....................                   if(!input(PB_increment)){temp ++;delay_ms(200);}  
00CE2:  BSF    F93.4
00CE4:  BTFSC  F81.4
00CE6:  BRA    0CF2
00CE8:  INCF   10,F
00CEA:  MOVLW  C8
00CEC:  MOVWF  12
00CEE:  CALL   0196
....................                      if (temp > 59){temp = 0;}
00CF2:  MOVF   10,W
00CF4:  SUBLW  3B
00CF6:  BC    0CFA
00CF8:  CLRF   10
....................                         if(!input(PB_Save_Time)){
00CFA:  BSF    F93.5
00CFC:  BTFSC  F81.5
00CFE:  BRA    0D48
....................                         minute = (((temp/10) << 4) | (temp % 10));
00D00:  MOVFF  10,13
00D04:  MOVLW  0A
00D06:  MOVWF  14
00D08:  CALL   03D6
00D0C:  SWAPF  01,W
00D0E:  MOVWF  11
00D10:  MOVLW  F0
00D12:  ANDWF  11,F
00D14:  MOVFF  10,13
00D18:  MOVLW  0A
00D1A:  MOVWF  14
00D1C:  CALL   03D6
00D20:  MOVF   00,W
00D22:  IORWF  11,W
00D24:  MOVWF  05
....................                         //(((temp/10) << 4) | (temp % 10)); convert temp to BCD
....................                         Write_minutes();
00D26:  BRA    0926
....................                         Write_seconds();
00D28:  BRA    0986
....................                         loop5 = 0;
00D2A:  CLRF   0E
....................                         temp=0;
00D2C:  CLRF   10
....................             // clear the area where the hours were setup  
....................                         putc (0xfe);
00D2E:  MOVLW  FE
00D30:  CALL   018E
....................                         putc (0x51); // clear the screen
00D34:  MOVLW  51
00D36:  CALL   018E
....................                         delay_ms(200);
00D3A:  MOVLW  C8
00D3C:  MOVWF  12
00D3E:  CALL   0196
....................                         Template();
00D42:  CALL   01E0
....................                         return;
00D46:  BRA    0FF8
....................                        }//end if
00D48:  BRA    0C66
....................                        }//end while 
....................                        
....................            case 5:   //day
....................                   temp=1;
00D4A:  MOVLW  01
00D4C:  MOVWF  10
....................                   putc (0xfe);
00D4E:  MOVLW  FE
00D50:  CALL   018E
....................                   putc (0x51); // clear the screen
00D54:  MOVLW  51
00D56:  CALL   018E
....................                   delay_ms(200);
00D5A:  MOVLW  C8
00D5C:  MOVWF  12
00D5E:  CALL   0196
....................                while(loop5){
00D62:  MOVF   0E,F
00D64:  BZ    0E44
....................                   putc (0xFE);
00D66:  MOVLW  FE
00D68:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00D6C:  MOVLW  45
00D6E:  CALL   018E
....................                   putc (0x0);  // cursor psn 
00D72:  MOVLW  00
00D74:  CALL   018E
....................                   printf ("1=Sun2=Mon3=Tue4=Wed");
00D78:  MOVLW  FA
00D7A:  MOVWF  FF6
00D7C:  MOVLW  00
00D7E:  MOVWF  FF7
00D80:  CALL   01BE
....................                   putc (0xFE);
00D84:  MOVLW  FE
00D86:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00D8A:  MOVLW  45
00D8C:  CALL   018E
....................                   putc (0x40);  // cursor psn 
00D90:  MOVLW  40
00D92:  CALL   018E
....................                   printf ("5=Thu6=Fri7=Sat");
00D96:  MOVLW  10
00D98:  MOVWF  FF6
00D9A:  MOVLW  01
00D9C:  MOVWF  FF7
00D9E:  CALL   01BE
....................             // print the day as they increment 
....................                   putc (0xFE);
00DA2:  MOVLW  FE
00DA4:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00DA8:  MOVLW  45
00DAA:  CALL   018E
....................                   putc (0x54);  // cursor psn   
00DAE:  MOVLW  54
00DB0:  CALL   018E
....................                   printf ("Day =->%u",temp);
00DB4:  MOVLW  20
00DB6:  MOVWF  FF6
00DB8:  MOVLW  01
00DBA:  MOVWF  FF7
00DBC:  MOVLW  07
00DBE:  MOVWF  11
00DC0:  RCALL  08A6
00DC2:  MOVFF  10,11
00DC6:  MOVLW  1B
00DC8:  MOVWF  12
00DCA:  CALL   03FE
....................                   delay_ms(100);
00DCE:  MOVLW  64
00DD0:  MOVWF  12
00DD2:  CALL   0196
....................                  
....................                   if(!input(PB_increment)){temp ++;delay_ms(300);}  
00DD6:  BSF    F93.4
00DD8:  BTFSC  F81.4
00DDA:  BRA    0DEE
00DDC:  INCF   10,F
00DDE:  MOVLW  02
00DE0:  MOVWF  11
00DE2:  MOVLW  96
00DE4:  MOVWF  12
00DE6:  CALL   0196
00DEA:  DECFSZ 11,F
00DEC:  BRA    0DE2
....................                      if (temp > 7){temp = 0;}
00DEE:  MOVF   10,W
00DF0:  SUBLW  07
00DF2:  BC    0DF6
00DF4:  CLRF   10
....................                         if(!input(PB_Save_Time)){
00DF6:  BSF    F93.5
00DF8:  BTFSC  F81.5
00DFA:  BRA    0E42
....................                         day = (((temp/10) << 4) | (temp % 10));
00DFC:  MOVFF  10,13
00E00:  MOVLW  0A
00E02:  MOVWF  14
00E04:  CALL   03D6
00E08:  SWAPF  01,W
00E0A:  MOVWF  11
00E0C:  MOVLW  F0
00E0E:  ANDWF  11,F
00E10:  MOVFF  10,13
00E14:  MOVLW  0A
00E16:  MOVWF  14
00E18:  CALL   03D6
00E1C:  MOVF   00,W
00E1E:  IORWF  11,W
00E20:  MOVWF  0A
....................                         //(((temp/10) << 4) | (temp % 10)); convert temp to BCD
....................                         Write_days();
00E22:  BRA    09E4
....................                         loop5 = 0;
00E24:  CLRF   0E
....................                         temp=0;
00E26:  CLRF   10
....................             // clear the area where the hours were setup     
....................                          putc (0xfe);
00E28:  MOVLW  FE
00E2A:  CALL   018E
....................                          putc (0x51); // clear the screen
00E2E:  MOVLW  51
00E30:  CALL   018E
....................                          delay_ms(200);
00E34:  MOVLW  C8
00E36:  MOVWF  12
00E38:  CALL   0196
....................                          Template();
00E3C:  CALL   01E0
....................                         return;
00E40:  BRA    0FF8
....................                        }//end if
00E42:  BRA    0D62
....................                        }//end while 
....................                        
....................             case 4:   //month
....................                   temp=1;
00E44:  MOVLW  01
00E46:  MOVWF  10
....................                   putc (0xfe);
00E48:  MOVLW  FE
00E4A:  CALL   018E
....................                   putc (0x51); // clear the screen
00E4E:  MOVLW  51
00E50:  CALL   018E
....................                   delay_ms(200);
00E54:  MOVLW  C8
00E56:  MOVWF  12
00E58:  CALL   0196
....................                while(loop5){
00E5C:  MOVF   0E,F
00E5E:  BZ    0F20
....................                   putc (0xFE);
00E60:  MOVLW  FE
00E62:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00E66:  MOVLW  45
00E68:  CALL   018E
....................                   putc (0x0);  // cursor psn 
00E6C:  MOVLW  00
00E6E:  CALL   018E
....................                   printf ("Enter month 1-12");
00E72:  MOVLW  2A
00E74:  MOVWF  FF6
00E76:  MOVLW  01
00E78:  MOVWF  FF7
00E7A:  CALL   01BE
....................                   
....................             // print the day as they increment 
....................                   putc (0xFE);
00E7E:  MOVLW  FE
00E80:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00E84:  MOVLW  45
00E86:  CALL   018E
....................                   putc (0x54);  // cursor psn   
00E8A:  MOVLW  54
00E8C:  CALL   018E
....................                   printf (" Month =->%u",temp);
00E90:  MOVLW  3C
00E92:  MOVWF  FF6
00E94:  MOVLW  01
00E96:  MOVWF  FF7
00E98:  MOVLW  0A
00E9A:  MOVWF  11
00E9C:  RCALL  08A6
00E9E:  MOVFF  10,11
00EA2:  MOVLW  1B
00EA4:  MOVWF  12
00EA6:  CALL   03FE
....................                   delay_ms(100);
00EAA:  MOVLW  64
00EAC:  MOVWF  12
00EAE:  CALL   0196
....................                  
....................                   if(!input(PB_increment)){temp ++;delay_ms(300);}  
00EB2:  BSF    F93.4
00EB4:  BTFSC  F81.4
00EB6:  BRA    0ECA
00EB8:  INCF   10,F
00EBA:  MOVLW  02
00EBC:  MOVWF  11
00EBE:  MOVLW  96
00EC0:  MOVWF  12
00EC2:  CALL   0196
00EC6:  DECFSZ 11,F
00EC8:  BRA    0EBE
....................                      if (temp > 12){temp = 0;}
00ECA:  MOVF   10,W
00ECC:  SUBLW  0C
00ECE:  BC    0ED2
00ED0:  CLRF   10
....................                         if(!input(PB_Save_Time)){
00ED2:  BSF    F93.5
00ED4:  BTFSC  F81.5
00ED6:  BRA    0F1E
....................                         month = (((temp/10) << 4) | (temp % 10));
00ED8:  MOVFF  10,13
00EDC:  MOVLW  0A
00EDE:  MOVWF  14
00EE0:  CALL   03D6
00EE4:  SWAPF  01,W
00EE6:  MOVWF  11
00EE8:  MOVLW  F0
00EEA:  ANDWF  11,F
00EEC:  MOVFF  10,13
00EF0:  MOVLW  0A
00EF2:  MOVWF  14
00EF4:  CALL   03D6
00EF8:  MOVF   00,W
00EFA:  IORWF  11,W
00EFC:  MOVWF  08
....................                         //(((temp/10) << 4) | (temp % 10)); convert temp to BCD
....................                         Write_months();
00EFE:  BRA    0A46
....................                         loop5 = 0;
00F00:  CLRF   0E
....................                         temp=0;
00F02:  CLRF   10
....................             // clear the area where the hours were setup     
....................                          putc (0xfe);
00F04:  MOVLW  FE
00F06:  CALL   018E
....................                          putc (0x51); // clear the screen
00F0A:  MOVLW  51
00F0C:  CALL   018E
....................                          delay_ms(200);
00F10:  MOVLW  C8
00F12:  MOVWF  12
00F14:  CALL   0196
....................                          Template();
00F18:  CALL   01E0
....................                         return;
00F1C:  BRA    0FF8
....................                        }//end if
00F1E:  BRA    0E5C
....................                        }//end while 
....................                        
....................            case 3:   //date
....................                   temp=1;
00F20:  MOVLW  01
00F22:  MOVWF  10
....................                   putc (0xfe);
00F24:  MOVLW  FE
00F26:  CALL   018E
....................                   putc (0x51); // clear the screen
00F2A:  MOVLW  51
00F2C:  CALL   018E
....................                   delay_ms(200);
00F30:  MOVLW  C8
00F32:  MOVWF  12
00F34:  CALL   0196
....................                while(loop5){
00F38:  MOVF   0E,F
00F3A:  BZ    0FF4
....................                   putc (0xFE);
00F3C:  MOVLW  FE
00F3E:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00F42:  MOVLW  45
00F44:  CALL   018E
....................                   putc (0x0);  // cursor psn 
00F48:  MOVLW  00
00F4A:  CALL   018E
....................                   printf ("Enter Date 1-31");
00F4E:  MOVLW  4A
00F50:  MOVWF  FF6
00F52:  MOVLW  01
00F54:  MOVWF  FF7
00F56:  CALL   01BE
....................                   
....................             // print the day as they increment 
....................                   putc (0xFE);
00F5A:  MOVLW  FE
00F5C:  CALL   018E
....................                   putc (0x45);  // cursor psn cmd
00F60:  MOVLW  45
00F62:  CALL   018E
....................                   putc (0x54);  // cursor psn   
00F66:  MOVLW  54
00F68:  CALL   018E
....................                   printf (" Date =->%u",temp);
00F6C:  MOVLW  5A
00F6E:  MOVWF  FF6
00F70:  MOVLW  01
00F72:  MOVWF  FF7
00F74:  MOVLW  09
00F76:  MOVWF  11
00F78:  RCALL  08A6
00F7A:  MOVFF  10,11
00F7E:  MOVLW  1B
00F80:  MOVWF  12
00F82:  CALL   03FE
....................                   delay_ms(100);
00F86:  MOVLW  64
00F88:  MOVWF  12
00F8A:  CALL   0196
....................                  
....................                   if(!input(PB_increment)){temp ++;delay_ms(200);}  
00F8E:  BSF    F93.4
00F90:  BTFSC  F81.4
00F92:  BRA    0F9E
00F94:  INCF   10,F
00F96:  MOVLW  C8
00F98:  MOVWF  12
00F9A:  CALL   0196
....................                      if (temp > 31){temp = 0;}
00F9E:  MOVF   10,W
00FA0:  SUBLW  1F
00FA2:  BC    0FA6
00FA4:  CLRF   10
....................                         if(!input(PB_Save_Time)){
00FA6:  BSF    F93.5
00FA8:  BTFSC  F81.5
00FAA:  BRA    0FF2
....................                         date = (((temp/10) << 4) | (temp % 10));
00FAC:  MOVFF  10,13
00FB0:  MOVLW  0A
00FB2:  MOVWF  14
00FB4:  CALL   03D6
00FB8:  SWAPF  01,W
00FBA:  MOVWF  11
00FBC:  MOVLW  F0
00FBE:  ANDWF  11,F
00FC0:  MOVFF  10,13
00FC4:  MOVLW  0A
00FC6:  MOVWF  14
00FC8:  CALL   03D6
00FCC:  MOVF   00,W
00FCE:  IORWF  11,W
00FD0:  MOVWF  07
....................                         //(((temp/10) << 4) | (temp % 10)); convert temp to BCD
....................                         Write_date();
00FD2:  BRA    0AAE
....................                         loop5 = 0;
00FD4:  CLRF   0E
....................                         temp=0;
00FD6:  CLRF   10
....................             // clear the area where the hours were setup     
....................                          putc (0xfe);
00FD8:  MOVLW  FE
00FDA:  CALL   018E
....................                          putc (0x51); // clear the screen
00FDE:  MOVLW  51
00FE0:  CALL   018E
....................                          delay_ms(200);
00FE4:  MOVLW  C8
00FE6:  MOVWF  12
00FE8:  CALL   0196
....................                          Template();
00FEC:  CALL   01E0
....................                         return;
00FF0:  BRA    0FF8
....................                        }//end if
00FF2:  BRA    0F38
....................                        }//end while 
....................             default: 
....................                loop5 = 0;
00FF4:  CLRF   0E
....................                temp=0;
00FF6:  CLRF   10
....................                RETURN;
....................           }//end switch case  
00FF8:  GOTO   1098 (RETURN)
....................       }//end set time
....................      
.................... 
....................         #include <Display_All.h>
....................  
....................  
....................  
....................  
....................     void  Display_All_Regs() {
....................        // Convert BCD to decimal
....................         second = (second >> 4) * 10 + (second & 0x0F);
....................         minute = (minute >> 4) * 10 + (minute & 0x0F);
....................         hour =   (hour   >> 4) * 10 + (hour   & 0x0F);
....................         date =   (date   >> 4) * 10 + (date   & 0x0F);
....................         month =  (month  >> 4) * 10 + (month  & 0x0F);
....................         year =   (year   >> 4) * 10 + (year   & 0x0F);
....................      // End conversion
....................     
....................        
....................          putc (0x1B);  // cursor escape
....................          putc (0x00);
....................          printf ("Hours->%u",hour);
....................          delay_ms(50);
....................          
....................          putc (0x1B);  // cursor escape
....................          putc (0x1a); 
....................          printf ("%u",hour);
....................          delay_ms(50);
....................          
....................          putc (0x1B);  // cursor escape
....................          putc (0x09);  
....................          printf (" Min->");
....................          delay_ms(50);
....................          
....................          putc (0x1B);  // cursor escape
....................          putc (0x0f);
....................          printf ("%u ",minute);
....................          delay_ms(2000);
....................     // clear the area where the hours and minutes were displayed    
....................          putc (0x1B);  // cursor escape
....................          putc (0x00);
....................          printf ("  WB9IXS UTC CLOCK  ");
....................          Read_All_RTC_Regs();
....................       
....................     }
.................... 
....................       
....................         #define PB_Set_Time PIN_B3
....................       
....................     
....................      
....................     void main()
00FFC:  CLRF   FF8
00FFE:  BCF    FD0.7
01000:  BCF    FB8.3
01002:  MOVLW  19
01004:  MOVWF  FAF
01006:  MOVLW  A6
01008:  MOVWF  FAC
0100A:  MOVLW  90
0100C:  MOVWF  FAB
0100E:  CLRF   0D
01010:  CLRF   0C
01012:  CLRF   0E
01014:  CLRF   10
01016:  MOVLB  F
01018:  CLRF   x38
0101A:  CLRF   x39
0101C:  CLRF   x3A
0101E:  CLRF   F77
01020:  CLRF   F78
01022:  CLRF   F79
....................        {      
....................                 putc (0xfe);
01024:  MOVLW  FE
01026:  MOVLB  0
01028:  CALL   018E
....................                 putc (0x61); // rs232 baud  
0102C:  MOVLW  61
0102E:  CALL   018E
....................                 putc (0x04); // = 9600
01032:  MOVLW  04
01034:  CALL   018E
....................                 
....................                 delay_ms(3000);       // wait for lcd to init
01038:  MOVLW  0C
0103A:  MOVWF  11
0103C:  MOVLW  FA
0103E:  MOVWF  12
01040:  CALL   0196
01044:  DECFSZ 11,F
01046:  BRA    103C
....................                 putc (0xfe);
01048:  MOVLW  FE
0104A:  CALL   018E
....................                 putc (0x41); // Turn on display
0104E:  MOVLW  41
01050:  CALL   018E
....................                 
....................                 putc (0xfe);
01054:  MOVLW  FE
01056:  CALL   018E
....................                 putc (0x51); // clear the screen               
0105A:  MOVLW  51
0105C:  CALL   018E
....................                         
....................                 putc (0xfe); // set briteness 0-8
01060:  MOVLW  FE
01062:  CALL   018E
....................                 putc (0x53); 
01066:  MOVLW  53
01068:  CALL   018E
....................                 putc (0x08);              
0106C:  MOVLW  08
0106E:  CALL   018E
....................                
....................                 putc (0xfe); // set contrast 0-50
01072:  MOVLW  FE
01074:  CALL   018E
....................                 putc (0x52); 
01078:  MOVLW  52
0107A:  CALL   018E
....................                 putc (39);  
0107E:  MOVLW  27
01080:  CALL   018E
....................                 
....................                 Template();
01084:  CALL   01E0
....................                                              
....................                 Read_All_RTC_Regs_At_Start(); //read all ds1307 regs without display
01088:  GOTO   030C
....................                        
....................        while(TRUE)
....................          {  
....................             Read_All_RTC_Regs();
0108C:  GOTO   07DA
....................            if (!input (PB_Set_Time)) // this allows the thumbwheel to be read
01090:  BSF    F93.3
01092:  BTFSC  F81.3
01094:  BRA    1098
....................               {
....................               Manual_Set_Time(); // this is where the switch psn is read  
01096:  BRA    0B16
....................              }                    
01098:  BRA    108C
....................             
....................       }//end while
....................           }//main
0109A:  SLEEP 

Configuration Fuses:
   Word  1: E100   XT NOPLLEN PRIMARY FCMEN IESO
   Word  2: 3C1E   PUT BROWNOUT BORV19 NOWDT WDT32768
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
